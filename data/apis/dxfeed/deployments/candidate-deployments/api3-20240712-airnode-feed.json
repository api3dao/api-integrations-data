{
  "nodeSettings": {
    "airnodeWalletMnemonic": "${WALLET_MNEMONIC}",
    "nodeVersion": "1.1.0",
    "stage": "${STAGE}"
  },
  "templates": {
    "0xa3d85558c12c1bf44bf390ce6175e2297ca3ae274f2596c32ce0aa0474a117a5": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "AAVE/USD"
        }
      ]
    },
    "0xf1eca17539034a76fe36393ffcaccfc9cd096b066a27e921421455b3856692a3": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "ALGO/USD"
        }
      ]
    },
    "0x212aad83c43839b2a0a9f1417bc9d64acc2792e1d89a315f67624f7b0869e2cb": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "ANKR/USD"
        }
      ]
    },
    "0xf8583d097fc6ba8b5955a158fcf37bdfc359ebdfcec5c977b4c3094f7f80eb0f": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "APE/USD"
        }
      ]
    },
    "0x8831a15682052b3045ba1587e56ae145d200b041390930c64741ab59add01e5b": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "API3/USD"
        }
      ]
    },
    "0x6620c320ce9d09a31791338d928ef45cf110c560cb14e3381d8bf1e30450b1e7": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "APT/USD"
        }
      ]
    },
    "0x9eea2337ba00358180fddf877fe20f968c1c2ef89fd0c9cdb733e760e9954ff2": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "ARB/USD"
        }
      ]
    },
    "0xdcaaeb5a17395ec0d3170ea4f24620c043785d5dc7a91cc3c81139238d636d4d": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "ATOM/USD"
        }
      ]
    },
    "0xd4b54d8a9cbfa17ff7dddbfe06889a66bca6e7c96b631bfe99744171f53b71d4": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "AVAX/USD"
        }
      ]
    },
    "0x3af19087330e8764f0ecd01b595bfb0c3c59b6deedd6bc772d85f68fd01e52cc": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "AXS/USD"
        }
      ]
    },
    "0x12da3c6e2c083f973d4555078a1f9bc2b38e0d1e4eca67112065f899a228f4a8": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "BAL/USD"
        }
      ]
    },
    "0xe79244d5d8b537988c9c7473cdb5f97dd72254baa149841e24df07e5064b38e4": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "BAND/USD"
        }
      ]
    },
    "0xc69720980a225f18089f27a2ca79b914adf119d9f39c42a3fa7184f5c5f09336": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "BAT/USD"
        }
      ]
    },
    "0xea97218fb8049472d495f90850fda6a408c0d8d294148d45b36ac13ef40df467": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "BLUR/USD"
        }
      ]
    },
    "0x9adc26602c928da5f5f8afb858de8a529bf4acac778f0b8413b66392c8251741": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "BNB/USD"
        }
      ]
    },
    "0xeb14c9c1598936b366216f80f04a33b96a6b7e9479ac1a5596f8bcb509b0fe5d": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "CAKE/USD"
        }
      ]
    },
    "0xdbe7c0d3c98cb5c57396b870ae0f502e2cc566f0672546595351ffd56aaff55c": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "CELO/USD"
        }
      ]
    },
    "0xb16c71f51d2297118940dbde2102bc287497cb3ab26a52ce5feecbc82a613c30": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "CHZ/USD"
        }
      ]
    },
    "0x841eabbff6c7a29d86f3b2c4817eb2be15d4ade30c39d24ce935cde4fcb1314f": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "COMP/USD"
        }
      ]
    },
    "0x97f5c3df9d8df1dbe973757d84b750e73ce7cdcb7b09c9e4338c084269950253": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "CRO/USD"
        }
      ]
    },
    "0xc7cd113c1f848717fea411ce736ce5b31ca15d76066b0b7b4e5d37340dd91f3e": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "CRV/USD"
        }
      ]
    },
    "0xe2a0835006b50bc9bebf0558b6f1f881a27e2c475bd5e08e70c6021c3014fa98": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "CVX/USD"
        }
      ]
    },
    "0xd1791a17b5849648ec9394d07788123100267f0f258b8e187a36aee93d745dfe": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "DAI/USD"
        }
      ]
    },
    "0x60555c01b2370321a7a6fa155a871dfbd6db7a3e1dcc3fd98328e0e1b00ac4c2": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "DOT/USD"
        }
      ]
    },
    "0x51ac9f4818dbc5fe9bb8784a4933e91b4741a8e2c0409d96020043590241d1e3": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "DYDX/USD"
        }
      ]
    },
    "0xaf5676469c1871aceba34de3565b2fd43000c3fb66bc9364c2d16d8d91909f59": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "ENS/USD"
        }
      ]
    },
    "0x9b0bac48bbd26032fddd28166989cca9da00469f7b05491610259105a14ee6d8": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "EUL/USD"
        }
      ]
    },
    "0x6a69518ff0ee200cf4491e7c7ce00022cf1199ba852e1019ffdc44ff2e352458": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "FIL/USD"
        }
      ]
    },
    "0xb652db6723432f95eb78902d33a2f1645aa40ec8c742fd4c66d9a761f00a7760": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "FLOW/USD"
        }
      ]
    },
    "0xd90a71e457db659700aca6c92ac3dbb7d530424bf9cce892a8a64cc7ea7b3585": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "FTM/USD"
        }
      ]
    },
    "0xbd96ef7b1f7f670dcf23eaf98ea8938e1116d5679ceac07b6cbb53dfec80af36": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "FXS/USD"
        }
      ]
    },
    "0x65964e2f95d64b243db6c9665a7f4cd19794ab08fb6fc6c0e52066c6cecff972": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "GLMR/USD"
        }
      ]
    },
    "0x7f3cd4e04fa1b6f3174ab7595f5823f01abf5613c10d8683e9a056802a4b54eb": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "GMX/USD"
        }
      ]
    },
    "0x045a4b58d85801de43401941431be90c9a58cf9ab81a0474626f3aa42fd5e6a5": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "GNO/USD"
        }
      ]
    },
    "0xf99c7967347bf48243c0d70bca5bc7c9ea28d1c61b62acbdfd26bc14efedd4dd": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "GRT/USD"
        }
      ]
    },
    "0xaa5fc74cb8ef1a3d0e7e0cf7675431a82cb334b6bbc04ea638ac98c813bfdbb2": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "HNT/USD"
        }
      ]
    },
    "0x1f2f9f1ad91538dd520e5b221779e1d520acc687bf6bc83258162f749cad75cb": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "ICP/USD"
        }
      ]
    },
    "0x2eee6add102f3cbacfbd3f1e7cfa7a6cb7dec6b0721a2f2e1330d8ecb4d57894": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "IMX/USD"
        }
      ]
    },
    "0xa6e556b85d65f66a0508c5a70fb32f232e26b167cdb2b1b2b8ada3d58f4ee538": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "JOE/USD"
        }
      ]
    },
    "0x2756388b768600a3f41b9f4a84287214cfcf0683f2424d0898d8f9a84ad84eec": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "KSM/USD"
        }
      ]
    },
    "0x7bef7638370de2d03e18be442ce5e3f3ca889754c52bdb84c1d0ac3efdc89266": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "LDO/USD"
        }
      ]
    },
    "0x037e55ab812ea96a7f8377449e2079c277cfb5b64b1f742dec06850591b033ac": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "LINK/USD"
        }
      ]
    },
    "0xf4c990367a277f495264b4145b557269d08238096d29fffffb1123f284098eb9": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "LTC/USD"
        }
      ]
    },
    "0x275ac95d2abc6b90c8ccb2c8581c2a06ca9e4f83f757d2dfc0c25bdd5a40e225": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "MANA/USD"
        }
      ]
    },
    "0x4db3b09ff55682d133b5ec901eff359b19435d8f6060b77d1025ba8a08903671": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "MASK/USD"
        }
      ]
    },
    "0xc979ebbc4675765fb5872d93e1678ac4ed2d767252908db60eb4437581ffa8a6": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "MATIC/USD"
        }
      ]
    },
    "0x558e20714f0df282a5882ca151a60f0f02175cd0e6ffcf177fdd4b5a2edcf529": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "MKR/USD"
        }
      ]
    },
    "0xb9beef1f272469c9fb00bd7f10952da957c4576a33674e0d0d8bf1c131e34159": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "MOVR/USD"
        }
      ]
    },
    "0xce880a27735c592072c0ce2e333285d93bcc22305ce54b78cc35cc504ba7ad49": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "NEAR/USD"
        }
      ]
    },
    "0x9e60f51ff35316e80220816adfec5f1828089809587b37c8a438e54c850945ed": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "PAXG/USD"
        }
      ]
    },
    "0x86bee05766f582754f0bd7a19c5f691ff1da27dd28f73b9a9bac90f3cfc3bc2f": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "RNDR/USD"
        }
      ]
    },
    "0x3734673f784ceae2cfd990ef176672ebb88f360485c5eae96fdd92978619965b": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "RPL/USD"
        }
      ]
    },
    "0x73278ea63858c3ea4fad2542d0208bc19de2a5ac20f42f19c17ebed46d9db4aa": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "RSR/USD"
        }
      ]
    },
    "0x4781935038779fd507c3268437831231c12da0f3ea4ccce4d6007cbc5dadb95c": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "RUNE/USD"
        }
      ]
    },
    "0x36d7000f877bed167fba76cb71a03e96c53a52f17e74aad47248bfb06e5bca91": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "SAND/USD"
        }
      ]
    },
    "0x50b5e485c3ccd8d8fa18003cef73dca222559a8aa75f56956c898aae42c289af": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "SHIB/USD"
        }
      ]
    },
    "0x9f4f815094f7e4ff2c4a03795f144fdde1ffe5069b201519b626a00c3d1d9755": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "SNX/USD"
        }
      ]
    },
    "0x28d99202cb1e518e5b294a40ca6f15efc9b2452372de67d4e2fa3fccb54da70c": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "SOL/USD"
        }
      ]
    },
    "0x2c255d1111afdd551d5a7053f925a1c83f604aa1afabe9a1d2968fc73a30b09c": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "STG/USD"
        }
      ]
    },
    "0x79ac6c7ec630dc1d7eacbe88f38d6e72cef17729422c6c4f8bf61fc548ad24c5": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "STX/USD"
        }
      ]
    },
    "0x147dc33d9c9808e07ff40919f1c6bc8cf960fed317167c41a97994ce92368801": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "SUSHI/USD"
        }
      ]
    },
    "0x00786e5baf4c8f770b1331700ea4706ab6d5b83eb64c5ba6f1e7ee137a6fb05f": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "TUSD/USD"
        }
      ]
    },
    "0x7972e927f0ee9bfd0d1b1b8f2a7f7887df9ce1ed40d082d159dabc5f58b90d78": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "UMA/USD"
        }
      ]
    },
    "0x9f409ee7fe1fb82bf35a00c1aa2dd42df635a063411533209fc754011875e19f": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "UNI/USD"
        }
      ]
    },
    "0x82379197b63c0de29de453937245a030fdbda28e0edfaabb8a5ac8f22e33a67e": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "USDP/USD"
        }
      ]
    },
    "0x0788be65d339138c58bd6f97212e209b6e60d84e57ec5d4d88c283bfd18ff426": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "USDT/USD"
        }
      ]
    },
    "0x70910ace460d65dfb7bd31130331a61bb17281c2c495ef3e4bb7d0fd406f12f6": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "XLM/USD"
        }
      ]
    },
    "0x11379b290e8e3b947796c29876259b21e9866d118e7075b46783e3221bf4aa1c": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "XTZ/USD"
        }
      ]
    },
    "0x30e16da23368aab5c230ef9043fcdd520eb4869be96eaa0fd3ad66ad0807d045": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "YFI/USD"
        }
      ]
    },
    "0x27300bd896c7814c63430d808e2dceffcc588314f1039552b3dfef2423fd8ad3": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "ADA/USD"
        }
      ]
    },
    "0xbbd3d6ddb1136b92f52d55bba6b2eebcff5774b5963fbdf7109efd6ad1857c67": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "BTC/USD"
        }
      ]
    },
    "0x056e5c70935db8753330bbabd3f3caa015489853f721f0c9b8600eb6bc91f648": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "ETH/USD"
        }
      ]
    },
    "0x60e5c1ca4d5d5d9dedad8166ddc15d675778b3cad94cbc7e804c9766f7e4afb4": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "XRP/USD"
        }
      ]
    },
    "0xd22cf848c8820649b3a69d8535c69afdfec4091b9acde51fa4154d9e06ee14db": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "DOGE/USD"
        }
      ]
    },
    "0xa58470020b13c71d6fb4264a3b7692b670bc7856c596c01c5b3ac5e97e5d57b2": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "USDC/USD"
        }
      ]
    },
    "0x6719498de10a96cd4256ec545fd75e9efcb3e7d3cd90d4a1240c4828105809a3": {
      "endpointId": "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "ASTR/USD"
        }
      ]
    }
  },
  "endpoints": {
    "0xd977adc4d2ab37da0d7d6c61ef290314fe26190fa38c9ecb04693a1dfd11b1d3": {
      "endpointName": "feed",
      "oisTitle": "dxFeed"
    }
  },
  "triggers": {
    "signedApiUpdates": [
      {
        "templateIds": ["0xa3d85558c12c1bf44bf390ce6175e2297ca3ae274f2596c32ce0aa0474a117a5"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xf1eca17539034a76fe36393ffcaccfc9cd096b066a27e921421455b3856692a3"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x212aad83c43839b2a0a9f1417bc9d64acc2792e1d89a315f67624f7b0869e2cb"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xf8583d097fc6ba8b5955a158fcf37bdfc359ebdfcec5c977b4c3094f7f80eb0f"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x8831a15682052b3045ba1587e56ae145d200b041390930c64741ab59add01e5b"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x6620c320ce9d09a31791338d928ef45cf110c560cb14e3381d8bf1e30450b1e7"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x9eea2337ba00358180fddf877fe20f968c1c2ef89fd0c9cdb733e760e9954ff2"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xdcaaeb5a17395ec0d3170ea4f24620c043785d5dc7a91cc3c81139238d636d4d"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xd4b54d8a9cbfa17ff7dddbfe06889a66bca6e7c96b631bfe99744171f53b71d4"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x3af19087330e8764f0ecd01b595bfb0c3c59b6deedd6bc772d85f68fd01e52cc"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x12da3c6e2c083f973d4555078a1f9bc2b38e0d1e4eca67112065f899a228f4a8"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xe79244d5d8b537988c9c7473cdb5f97dd72254baa149841e24df07e5064b38e4"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xc69720980a225f18089f27a2ca79b914adf119d9f39c42a3fa7184f5c5f09336"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xea97218fb8049472d495f90850fda6a408c0d8d294148d45b36ac13ef40df467"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x9adc26602c928da5f5f8afb858de8a529bf4acac778f0b8413b66392c8251741"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xeb14c9c1598936b366216f80f04a33b96a6b7e9479ac1a5596f8bcb509b0fe5d"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xdbe7c0d3c98cb5c57396b870ae0f502e2cc566f0672546595351ffd56aaff55c"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xb16c71f51d2297118940dbde2102bc287497cb3ab26a52ce5feecbc82a613c30"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x841eabbff6c7a29d86f3b2c4817eb2be15d4ade30c39d24ce935cde4fcb1314f"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x97f5c3df9d8df1dbe973757d84b750e73ce7cdcb7b09c9e4338c084269950253"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xc7cd113c1f848717fea411ce736ce5b31ca15d76066b0b7b4e5d37340dd91f3e"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xe2a0835006b50bc9bebf0558b6f1f881a27e2c475bd5e08e70c6021c3014fa98"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xd1791a17b5849648ec9394d07788123100267f0f258b8e187a36aee93d745dfe"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x60555c01b2370321a7a6fa155a871dfbd6db7a3e1dcc3fd98328e0e1b00ac4c2"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x51ac9f4818dbc5fe9bb8784a4933e91b4741a8e2c0409d96020043590241d1e3"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xaf5676469c1871aceba34de3565b2fd43000c3fb66bc9364c2d16d8d91909f59"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x9b0bac48bbd26032fddd28166989cca9da00469f7b05491610259105a14ee6d8"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x6a69518ff0ee200cf4491e7c7ce00022cf1199ba852e1019ffdc44ff2e352458"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xb652db6723432f95eb78902d33a2f1645aa40ec8c742fd4c66d9a761f00a7760"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xd90a71e457db659700aca6c92ac3dbb7d530424bf9cce892a8a64cc7ea7b3585"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xbd96ef7b1f7f670dcf23eaf98ea8938e1116d5679ceac07b6cbb53dfec80af36"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x65964e2f95d64b243db6c9665a7f4cd19794ab08fb6fc6c0e52066c6cecff972"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x7f3cd4e04fa1b6f3174ab7595f5823f01abf5613c10d8683e9a056802a4b54eb"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x045a4b58d85801de43401941431be90c9a58cf9ab81a0474626f3aa42fd5e6a5"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xf99c7967347bf48243c0d70bca5bc7c9ea28d1c61b62acbdfd26bc14efedd4dd"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xaa5fc74cb8ef1a3d0e7e0cf7675431a82cb334b6bbc04ea638ac98c813bfdbb2"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x1f2f9f1ad91538dd520e5b221779e1d520acc687bf6bc83258162f749cad75cb"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x2eee6add102f3cbacfbd3f1e7cfa7a6cb7dec6b0721a2f2e1330d8ecb4d57894"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xa6e556b85d65f66a0508c5a70fb32f232e26b167cdb2b1b2b8ada3d58f4ee538"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x2756388b768600a3f41b9f4a84287214cfcf0683f2424d0898d8f9a84ad84eec"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x7bef7638370de2d03e18be442ce5e3f3ca889754c52bdb84c1d0ac3efdc89266"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x037e55ab812ea96a7f8377449e2079c277cfb5b64b1f742dec06850591b033ac"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xf4c990367a277f495264b4145b557269d08238096d29fffffb1123f284098eb9"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x275ac95d2abc6b90c8ccb2c8581c2a06ca9e4f83f757d2dfc0c25bdd5a40e225"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x4db3b09ff55682d133b5ec901eff359b19435d8f6060b77d1025ba8a08903671"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xc979ebbc4675765fb5872d93e1678ac4ed2d767252908db60eb4437581ffa8a6"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x558e20714f0df282a5882ca151a60f0f02175cd0e6ffcf177fdd4b5a2edcf529"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xb9beef1f272469c9fb00bd7f10952da957c4576a33674e0d0d8bf1c131e34159"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xce880a27735c592072c0ce2e333285d93bcc22305ce54b78cc35cc504ba7ad49"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x9e60f51ff35316e80220816adfec5f1828089809587b37c8a438e54c850945ed"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x86bee05766f582754f0bd7a19c5f691ff1da27dd28f73b9a9bac90f3cfc3bc2f"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x3734673f784ceae2cfd990ef176672ebb88f360485c5eae96fdd92978619965b"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x73278ea63858c3ea4fad2542d0208bc19de2a5ac20f42f19c17ebed46d9db4aa"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x4781935038779fd507c3268437831231c12da0f3ea4ccce4d6007cbc5dadb95c"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x36d7000f877bed167fba76cb71a03e96c53a52f17e74aad47248bfb06e5bca91"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x50b5e485c3ccd8d8fa18003cef73dca222559a8aa75f56956c898aae42c289af"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x9f4f815094f7e4ff2c4a03795f144fdde1ffe5069b201519b626a00c3d1d9755"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x28d99202cb1e518e5b294a40ca6f15efc9b2452372de67d4e2fa3fccb54da70c"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x2c255d1111afdd551d5a7053f925a1c83f604aa1afabe9a1d2968fc73a30b09c"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x79ac6c7ec630dc1d7eacbe88f38d6e72cef17729422c6c4f8bf61fc548ad24c5"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x147dc33d9c9808e07ff40919f1c6bc8cf960fed317167c41a97994ce92368801"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x00786e5baf4c8f770b1331700ea4706ab6d5b83eb64c5ba6f1e7ee137a6fb05f"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x7972e927f0ee9bfd0d1b1b8f2a7f7887df9ce1ed40d082d159dabc5f58b90d78"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x9f409ee7fe1fb82bf35a00c1aa2dd42df635a063411533209fc754011875e19f"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x82379197b63c0de29de453937245a030fdbda28e0edfaabb8a5ac8f22e33a67e"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x0788be65d339138c58bd6f97212e209b6e60d84e57ec5d4d88c283bfd18ff426"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x70910ace460d65dfb7bd31130331a61bb17281c2c495ef3e4bb7d0fd406f12f6"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x11379b290e8e3b947796c29876259b21e9866d118e7075b46783e3221bf4aa1c"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x30e16da23368aab5c230ef9043fcdd520eb4869be96eaa0fd3ad66ad0807d045"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x27300bd896c7814c63430d808e2dceffcc588314f1039552b3dfef2423fd8ad3"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xbbd3d6ddb1136b92f52d55bba6b2eebcff5774b5963fbdf7109efd6ad1857c67"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x056e5c70935db8753330bbabd3f3caa015489853f721f0c9b8600eb6bc91f648"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x60e5c1ca4d5d5d9dedad8166ddc15d675778b3cad94cbc7e804c9766f7e4afb4"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xd22cf848c8820649b3a69d8535c69afdfec4091b9acde51fa4154d9e06ee14db"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0xa58470020b13c71d6fb4264a3b7692b670bc7856c596c01c5b3ac5e97e5d57b2"],
        "fetchInterval": 5
      },
      {
        "templateIds": ["0x6719498de10a96cd4256ec545fd75e9efcb3e7d3cd90d4a1240c4828105809a3"],
        "fetchInterval": 5
      }
    ]
  },
  "signedApis": [
    {
      "name": "Nodary",
      "url": "https://signed-api.nodary.io",
      "authToken": "${AUTH_TOKEN_NODARY}"
    },
    {
      "name": "API3",
      "url": "https://signed-api.api3.org",
      "authToken": "${AUTH_TOKEN_API3}"
    }
  ],
  "ois": [
    {
      "oisFormat": "2.3.0",
      "title": "dxFeed",
      "version": "0.1.0",
      "apiSpecifications": {
        "components": {
          "securitySchemes": {
            "DxFeedapi3SecurityScheme1ApiKey": {
              "in": "query",
              "name": "access_token",
              "type": "apiKey"
            }
          }
        },
        "paths": {
          "/{path}": {
            "get": {
              "parameters": [
                {
                  "in": "path",
                  "name": "path"
                },
                {
                  "in": "query",
                  "name": "event"
                },
                {
                  "in": "query",
                  "name": "symbol"
                },
                {
                  "in": "query",
                  "name": "source"
                },
                {
                  "in": "query",
                  "name": "fromTime"
                },
                {
                  "in": "query",
                  "name": "toTime"
                },
                {
                  "in": "query",
                  "name": "indent"
                },
                {
                  "in": "query",
                  "name": "timeout"
                },
                {
                  "in": "query",
                  "name": "format"
                }
              ]
            }
          }
        },
        "servers": [
          {
            "url": "https://boca.dxfeed.com/api3"
          }
        ],
        "security": {
          "DxFeedapi3SecurityScheme1ApiKey": []
        }
      },
      "endpoints": [
        {
          "fixedOperationParameters": [],
          "name": "feed",
          "operation": {
            "method": "get",
            "path": "/{path}"
          },
          "parameters": [
            {
              "name": "name",
              "required": true
            },
            {
              "name": "path",
              "operationParameter": {
                "in": "path",
                "name": "path"
              },
              "required": true
            },
            {
              "name": "event",
              "operationParameter": {
                "in": "query",
                "name": "event"
              },
              "required": true
            },
            {
              "name": "symbol",
              "operationParameter": {
                "in": "query",
                "name": "symbol"
              },
              "required": true
            },
            {
              "name": "source",
              "operationParameter": {
                "in": "query",
                "name": "source"
              },
              "required": false
            },
            {
              "name": "fromTime",
              "operationParameter": {
                "in": "query",
                "name": "fromTime"
              },
              "required": false
            },
            {
              "name": "toTime",
              "operationParameter": {
                "in": "query",
                "name": "toTime"
              },
              "required": false
            },
            {
              "name": "indent",
              "operationParameter": {
                "in": "query",
                "name": "indent"
              },
              "required": false
            },
            {
              "name": "timeout",
              "operationParameter": {
                "in": "query",
                "name": "timeout"
              },
              "required": false
            },
            {
              "name": "format",
              "operationParameter": {
                "in": "query",
                "name": "format"
              },
              "required": false
            }
          ],
          "reservedParameters": [
            {
              "name": "_type",
              "fixed": "int256"
            },
            {
              "name": "_times",
              "fixed": "1000000000000000000"
            }
          ],
          "preProcessingSpecificationV2": {
            "environment": "Node",
            "value": "({ endpointParameters }) => {\n  const preProcessingObject = {\n    \"AAVE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AAVE/USDT:CXDXF\" },\n    },\n    \"ALGO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ALGO/USD\" },\n    },\n    \"ANKR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ANKR/USD\" },\n    },\n    \"APE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"APE/USD\" },\n    },\n    \"API3/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"API3/USD\" },\n    },\n    \"APT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"APT/USD\" },\n    },\n    \"ARB/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ARB/USD\" },\n    },\n    \"ATOM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ATOM/USD\" },\n    },\n    \"AVAX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AVAX/USD\" },\n    },\n    \"AXS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AXS/USD\" },\n    },\n    \"BAL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BAL/USD\" },\n    },\n    \"BAND/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BAND/USD\" },\n    },\n    \"BAT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BAT/USD\" },\n    },\n    \"BLUR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BLUR/USD\" },\n    },\n    \"BNB/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BNB/USDT:CXDXF\" },\n    },\n    \"CAKE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CAKE/USDT:CXDXF\" },\n    },\n    \"CELO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CELO/USDT:CXDXF\" },\n    },\n    \"CHZ/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CHZ/USD\" },\n    },\n    \"COMP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"COMP/USD\" },\n    },\n    \"CRO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CRO/USDT:CXDXF\" },\n    },\n    \"CRV/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CRV/USD\" },\n    },\n    \"CVX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CVX/USDT:CXBINA\" },\n    },\n    \"DAI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DAI/USD\" },\n    },\n    \"DOT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DOT/USDT:CXDXF\" },\n    },\n    \"DYDX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DYDX/USD\" },\n    },\n    \"ENS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ENS/USD\" },\n    },\n    \"EUL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"EUL/USD\" },\n    },\n    \"FIL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FIL/USD\" },\n    },\n    \"FLOW/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FLOW/USD\" },\n    },\n    \"FTM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FTM/USD\" },\n    },\n    \"FXS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FXS/USD\" },\n    },\n    \"GLMR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GLMR/USD\" },\n    },\n    \"GMX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GMX/USDT:CXDXF\" },\n    },\n    \"GNO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GNO/USD\" },\n    },\n    \"GRT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GRT/USD\" },\n    },\n    \"HNT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"HNT/USDT:CXDXF\" },\n    },\n    \"ICP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ICP/USD\" },\n    },\n    \"IMX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"IMX/USDT:CXDXF\" },\n    },\n    \"JOE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"JOE/USDT:CXDXF\" },\n    },\n    \"KSM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"KSM/USD\" },\n    },\n    \"LDO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"LDO/USD\" },\n    },\n    \"LINK/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"LINK/USDT:CXDXF\" },\n    },\n    \"LTC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"LTC/USDT:CXDXF\" },\n    },\n    \"MANA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MANA/USD\" },\n    },\n    \"MASK/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MASK/USD\" },\n    },\n    \"MATIC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MATIC/USD\" },\n    },\n    \"MKR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MKR/USD\" },\n    },\n    \"MOVR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MOVR/USD\" },\n    },\n    \"NEAR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"NEAR/USDT:CXDXF\" },\n    },\n    \"PAXG/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"PAXG/USD\" },\n    },\n    \"RNDR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RNDR/USD\" },\n    },\n    \"RPL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RPL/USD\" },\n    },\n    \"RSR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RSR/USDT:CXDXF\" },\n    },\n    \"RUNE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RUNE/USD\" },\n    },\n    \"SAND/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SAND/USD\" },\n    },\n    \"SHIB/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SHIB/USD\" },\n    },\n    \"SNX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SNX/USD\" },\n    },\n    \"SOL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SOL/USD\" },\n    },\n    \"STG/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"STG/USD\" },\n    },\n    \"STX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"STX/USD\" },\n    },\n    \"SUSHI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SUSHI/USD\" },\n    },\n    \"TUSD/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"TUSD/USDT:CXBINA\" },\n    },\n    \"UMA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"UMA/USD\" },\n    },\n    \"UNI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"UNI/USD\" },\n    },\n    \"USDP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"USDP/USDT:CXBINA\" },\n    },\n    \"USDT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"USDT/USD:CXGMNI\" },\n    },\n    \"XLM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"XLM/USD\" },\n    },\n    \"XTZ/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"XTZ/USD\" },\n    },\n    \"YFI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"YFI/USD\" },\n    },\n    \"ADA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ADA/USD:CXDXF\" },\n    },\n    \"BTC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BTC/USD:CXDXF\" },\n    },\n    \"ETH/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ETH/USD:CXDXF\" },\n    },\n    \"XRP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"XRP/USD:CXDXF\" },\n    },\n    \"DOGE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DOGE/USDT:CXDXF\" },\n    },\n    \"USDC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"USDC/USD\" },\n    },\n    \"ASTR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ASTR/USDT:CXBINA\" },\n    },\n  }\n  return {\n    endpointParameters: {\n      path: preProcessingObject[endpointParameters.name].path,\n      ...preProcessingObject[endpointParameters.name].parameters,\n    },\n  }\n}\n",
            "timeoutMs": 5000
          },
          "postProcessingSpecificationV2": {
            "environment": "Node",
            "value": "({ response, endpointParameters }) => {\n  const postProcessingObject = {\n    \"AAVE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AAVE/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['AAVE/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ALGO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ALGO/USD'].bidPrice;\\n            const askPrice = response.Quote['ALGO/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ANKR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ANKR/USD'].bidPrice;\\n            const askPrice = response.Quote['ANKR/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"APE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['APE/USD'].bidPrice;\\n            const askPrice = response.Quote['APE/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"API3/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['API3/USD'].bidPrice;\\n            const askPrice = response.Quote['API3/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"APT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['APT/USD'].bidPrice;\\n            const askPrice = response.Quote['APT/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ARB/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ARB/USD'].bidPrice;\\n            const askPrice = response.Quote['ARB/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ATOM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ATOM/USD'].bidPrice;\\n            const askPrice = response.Quote['ATOM/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"AVAX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AVAX/USD'].bidPrice;\\n            const askPrice = response.Quote['AVAX/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"AXS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AXS/USD'].bidPrice;\\n            const askPrice = response.Quote['AXS/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BAL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BAL/USD'].bidPrice;\\n            const askPrice = response.Quote['BAL/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BAND/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BAND/USD'].bidPrice;\\n            const askPrice = response.Quote['BAND/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BAT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BAT/USD'].bidPrice;\\n            const askPrice = response.Quote['BAT/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BLUR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BLUR/USD'].bidPrice;\\n            const askPrice = response.Quote['BLUR/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BNB/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BNB/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['BNB/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CAKE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CAKE/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['CAKE/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CELO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CELO/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['CELO/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CHZ/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CHZ/USD'].bidPrice;\\n            const askPrice = response.Quote['CHZ/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"COMP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['COMP/USD'].bidPrice;\\n            const askPrice = response.Quote['COMP/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CRO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CRO/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['CRO/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CRV/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CRV/USD'].bidPrice;\\n            const askPrice = response.Quote['CRV/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CVX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CVX/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['CVX/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DAI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DAI/USD'].bidPrice;\\n            const askPrice = response.Quote['DAI/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DOT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DOT/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['DOT/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DYDX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DYDX/USD'].bidPrice;\\n            const askPrice = response.Quote['DYDX/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ENS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ENS/USD'].bidPrice;\\n            const askPrice = response.Quote['ENS/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"EUL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['EUL/USD'].bidPrice;\\n            const askPrice = response.Quote['EUL/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FIL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FIL/USD'].bidPrice;\\n            const askPrice = response.Quote['FIL/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FLOW/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FLOW/USD'].bidPrice;\\n            const askPrice = response.Quote['FLOW/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FTM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FTM/USD'].bidPrice;\\n            const askPrice = response.Quote['FTM/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FXS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FXS/USD'].bidPrice;\\n            const askPrice = response.Quote['FXS/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GLMR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GLMR/USD'].bidPrice;\\n            const askPrice = response.Quote['GLMR/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GMX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GMX/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['GMX/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GNO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GNO/USD'].bidPrice;\\n            const askPrice = response.Quote['GNO/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GRT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GRT/USD'].bidPrice;\\n            const askPrice = response.Quote['GRT/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"HNT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['HNT/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['HNT/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ICP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ICP/USD'].bidPrice;\\n            const askPrice = response.Quote['ICP/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"IMX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['IMX/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['IMX/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"JOE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['JOE/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['JOE/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"KSM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['KSM/USD'].bidPrice;\\n            const askPrice = response.Quote['KSM/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"LDO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['LDO/USD'].bidPrice;\\n            const askPrice = response.Quote['LDO/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"LINK/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['LINK/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['LINK/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"LTC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['LTC/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['LTC/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MANA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MANA/USD'].bidPrice;\\n            const askPrice = response.Quote['MANA/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MASK/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MASK/USD'].bidPrice;\\n            const askPrice = response.Quote['MASK/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MATIC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MATIC/USD'].bidPrice;\\n            const askPrice = response.Quote['MATIC/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MKR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MKR/USD'].bidPrice;\\n            const askPrice = response.Quote['MKR/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MOVR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MOVR/USD'].bidPrice;\\n            const askPrice = response.Quote['MOVR/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"NEAR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['NEAR/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['NEAR/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"PAXG/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['PAXG/USD'].bidPrice;\\n            const askPrice = response.Quote['PAXG/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RNDR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RNDR/USD'].bidPrice;\\n            const askPrice = response.Quote['RNDR/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RPL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RPL/USD'].bidPrice;\\n            const askPrice = response.Quote['RPL/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RSR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RSR/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['RSR/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RUNE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RUNE/USD'].bidPrice;\\n            const askPrice = response.Quote['RUNE/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SAND/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SAND/USD'].bidPrice;\\n            const askPrice = response.Quote['SAND/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SHIB/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SHIB/USD'].bidPrice;\\n            const askPrice = response.Quote['SHIB/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SNX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SNX/USD'].bidPrice;\\n            const askPrice = response.Quote['SNX/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SOL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SOL/USD'].bidPrice;\\n            const askPrice = response.Quote['SOL/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"STG/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['STG/USD'].bidPrice;\\n            const askPrice = response.Quote['STG/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"STX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['STX/USD'].bidPrice;\\n            const askPrice = response.Quote['STX/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SUSHI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SUSHI/USD'].bidPrice;\\n            const askPrice = response.Quote['SUSHI/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"TUSD/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['TUSD/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['TUSD/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"UMA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['UMA/USD'].bidPrice;\\n            const askPrice = response.Quote['UMA/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"UNI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['UNI/USD'].bidPrice;\\n            const askPrice = response.Quote['UNI/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"USDP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['USDP/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['USDP/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"USDT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['USDT/USD:CXGMNI'].bidPrice;\\n            const askPrice = response.Quote['USDT/USD:CXGMNI'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"XLM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['XLM/USD'].bidPrice;\\n            const askPrice = response.Quote['XLM/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"XTZ/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['XTZ/USD'].bidPrice;\\n            const askPrice = response.Quote['XTZ/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"YFI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['YFI/USD'].bidPrice;\\n            const askPrice = response.Quote['YFI/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ADA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ADA/USD:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['ADA/USD:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BTC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BTC/USD:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['BTC/USD:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ETH/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ETH/USD:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['ETH/USD:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"XRP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['XRP/USD:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['XRP/USD:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DOGE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DOGE/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['DOGE/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"USDC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['USDC/USD'].bidPrice;\\n            const askPrice = response.Quote['USDC/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ASTR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ASTR/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['ASTR/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n  }\n  const parser = eval(postProcessingObject[endpointParameters.name])\n  return { response: parser(response) }\n}\n",
            "timeoutMs": 5000
          }
        }
      ]
    }
  ],
  "apiCredentials": [
    {
      "oisTitle": "dxFeed",
      "securitySchemeName": "DxFeedapi3SecurityScheme1ApiKey",
      "securitySchemeValue": "${DXFEEDAPI3SECURITYSCHEME1APIKEY_VALUE}"
    }
  ]
}
