[
  {
    "name": "AAVE/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "AAVE/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['AAVE/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['AAVE/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ADA/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ADA/USD:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ADA/USD:CXDXF'].bidPrice;\n            const askPrice = response.Quote['ADA/USD:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "AERO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "AERO/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['AERO/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['AERO/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ALGO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ALGO/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ALGO/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['ALGO/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ANKR/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ANKR/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ANKR/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['ANKR/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "APE/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "APE/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['APE/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['APE/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "API3/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "API3/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['API3/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['API3/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "APT/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "APT/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['APT/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['APT/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "AR/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "AR/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['AR/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['AR/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ARB/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ARB/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ARB/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['ARB/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ASTR/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ASTR/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ASTR/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['ASTR/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ATOM/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ATOM/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ATOM/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['ATOM/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "AVAX/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "AVAX/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['AVAX/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['AVAX/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "AXL/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "AXL/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['AXL/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['AXL/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "AXS/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "AXS/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['AXS/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['AXS/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "BAL/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "BAL/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['BAL/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['BAL/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "BAND/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "BAND/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['BAND/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['BAND/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "BAT/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "BAT/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['BAT/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['BAT/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "BERA/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "BERA/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['BERA/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['BERA/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "BLAST/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "BLAST/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['BLAST/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['BLAST/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "BLUR/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "BLUR/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['BLUR/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['BLUR/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "BNB/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "BNB/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['BNB/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['BNB/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "BRETT/USD",
    "path": "rest/events.json",
    "parameters": {
      "event": "Quote",
      "symbol": "BRETT/USDC:CXBBIT"
    },
    "parser": "(response) => {\n          const bidPrice = response.Quote['BRETT/USDC:CXBBIT'].bidPrice\n          const askPrice = response.Quote['BRETT/USDC:CXBBIT'].askPrice\n          const result = (bidPrice + askPrice) / 2\n          if (result === 'NaN' || result === NaN) {\n            throw Error(\n              '[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.',\n            )\n          }\n          return result\n        }\n        "
  },
  {
    "name": "BTC/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "BTC/USD:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['BTC/USD:CXDXF'].bidPrice;\n            const askPrice = response.Quote['BTC/USD:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "CAKE/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "CAKE/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['CAKE/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['CAKE/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "CELO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "CELO/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['CELO/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['CELO/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "CFX/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "CFX/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['CFX/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['CFX/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "CHZ/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "CHZ/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['CHZ/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['CHZ/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "COMP/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "COMP/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['COMP/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['COMP/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "COOK/USD",
    "path": "rest/events.json",
    "parameters": {
      "event": "Quote",
      "symbol": "COOK/USDT:CXBBIT"
    },
    "parser": "(response) => {\n          const bidPrice = response.Quote['COOK/USDT:CXBBIT'].bidPrice\n          const askPrice = response.Quote['COOK/USDT:CXBBIT'].askPrice\n          const result = (bidPrice + askPrice) / 2\n          if (result === 'NaN' || result === NaN) {\n            throw Error(\n              '[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.',\n            )\n          }\n          return result\n        }\n        "
  },
  {
    "name": "CORE/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "CORE/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['CORE/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['CORE/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "CRO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "CRO/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['CRO/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['CRO/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "CRV/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "CRV/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['CRV/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['CRV/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "CVX/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "CVX/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['CVX/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['CVX/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "DAI/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "DAI/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['DAI/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['DAI/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "DEGEN/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "DEGEN/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['DEGEN/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['DEGEN/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "DOGE/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "DOGE/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['DOGE/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['DOGE/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "DOT/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "DOT/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['DOT/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['DOT/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "DYDX/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "DYDX/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['DYDX/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['DYDX/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "DYM/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "DYM/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['DYM/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['DYM/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ENA/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ENA/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ENA/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['ENA/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ENS/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ENS/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ENS/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['ENS/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ETH/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ETH/USD:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ETH/USD:CXDXF'].bidPrice;\n            const askPrice = response.Quote['ETH/USD:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ETHFI/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ETHFI/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ETHFI/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['ETHFI/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "EURC/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "EUROC/USDT:CXHUO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['EUROC/USDT:CXHUO'].bidPrice;\n            const askPrice = response.Quote['EUROC/USDT:CXHUO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "FDUSD/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "FDUSD/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['FDUSD/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['FDUSD/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "FIL/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "FIL/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['FIL/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['FIL/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "FLOW/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "FLOW/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['FLOW/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['FLOW/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "FRAX/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "FRAX/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['FRAX/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['FRAX/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "FXS/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "FXS/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['FXS/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['FXS/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "GLMR/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "GLMR/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['GLMR/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['GLMR/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "GMX/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "GMX/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['GMX/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['GMX/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "GNO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "GNO/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['GNO/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['GNO/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "GNS/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "GNS/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['GNS/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['GNS/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "GRT/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "GRT/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['GRT/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['GRT/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "HBAR/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "HBAR/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['HBAR/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['HBAR/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "HNT/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "HNT/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['HNT/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['HNT/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "HYPE/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "HYPE/USDT:CXKUCO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['HYPE/USDT:CXKUCO'].bidPrice;\n            const askPrice = response.Quote['HYPE/USDT:CXKUCO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ICP/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ICP/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ICP/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['ICP/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "IMX/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "IMX/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['IMX/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['IMX/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "INJ/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "INJ/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['INJ/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['INJ/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "JOE/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "JOE/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['JOE/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['JOE/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "KAVA/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "KAVA/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['KAVA/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['KAVA/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "KDA/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "KDA/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['KDA/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['KDA/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "KSM/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "KSM/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['KSM/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['KSM/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "LDO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "LDO/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['LDO/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['LDO/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "LINK/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "LINK/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['LINK/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['LINK/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "LQTY/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "LQTY/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['LQTY/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['LQTY/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "LTC/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "LTC/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['LTC/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['LTC/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "LUMIA/USD",
    "path": "rest/events.json",
    "parameters": {
      "event": "Quote",
      "symbol": "LUMIA/USDT:CXBINA"
    },
    "parser": "(response) => {\n            const bidPrice = response.Quote['LUMIA/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['LUMIA/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "MANA/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "MANA/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['MANA/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['MANA/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "MANTA/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "MANTA/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['MANTA/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['MANTA/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "MASK/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "MASK/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['MASK/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['MASK/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "MERL/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "MERL/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['MERL/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['MERL/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "METIS/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "METIS/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['METIS/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['METIS/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "MKR/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "MKR/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['MKR/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['MKR/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "MNT/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "MNT/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['MNT/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['MNT/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "MODE/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "MODE/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['MODE/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['MODE/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "MORPHO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "MORPHO/USDT:CXOKEX"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['MORPHO/USDT:CXOKEX'].bidPrice;\n            const askPrice = response.Quote['MORPHO/USDT:CXOKEX'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "MOVR/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "MOVR/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['MOVR/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['MOVR/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "MTL/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "MTL/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['MTL/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['MTL/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "NEAR/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "NEAR/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['NEAR/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['NEAR/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "NEON/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "NEON/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['NEON/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['NEON/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "OKB/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "OKB/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['OKB/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['OKB/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ONDO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ONDO/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ONDO/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['ONDO/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "OP/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "OP/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['OP/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['OP/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ORDI/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ORDI/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ORDI/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['ORDI/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "OSMO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "OSMO/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['OSMO/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['OSMO/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "PAXG/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "PAXG/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['PAXG/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['PAXG/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "PENDLE/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "PENDLE/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['PENDLE/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['PENDLE/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "POL/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "POL/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['POL/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['POL/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "PYTH/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "PYTH/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['PYTH/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['PYTH/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "PYUSD/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "PYUSD/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['PYUSD/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['PYUSD/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "QUICK/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "QUICK/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['QUICK/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['QUICK/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "RARI/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "RARI/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['RARI/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['RARI/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "RDNT/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "RDNT/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['RDNT/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['RDNT/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "RENDER/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "RENDER/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['RENDER/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['RENDER/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "RIF/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "RIF/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['RIF/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['RIF/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "RON/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "RON/USDT:CXOKEX"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['RON/USDT:CXOKEX'].bidPrice;\n            const askPrice = response.Quote['RON/USDT:CXOKEX'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ROSE/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ROSE/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ROSE/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['ROSE/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "RPL/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "RPL/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['RPL/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['RPL/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "RSR/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "RSR/USDT:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['RSR/USDT:CXDXF'].bidPrice;\n            const askPrice = response.Quote['RSR/USDT:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "RUNE/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "RUNE/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['RUNE/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['RUNE/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "S/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "S/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['S/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['S/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "SAFE/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "SAFE/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['SAFE/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['SAFE/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "SAND/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "SAND/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['SAND/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['SAND/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "SATS/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "SATS/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['SATS/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['SATS/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "SCR/USD",
    "path": "rest/events.json",
    "parameters": {
      "event": "Quote",
      "symbol": "SCR/USDT:CXBINA"
    },
    "parser": "(response) => {\n          const bidPrice = response.Quote['SCR/USDT:CXBINA'].bidPrice\n          const askPrice = response.Quote['SCR/USDT:CXBINA'].askPrice\n          const result = (bidPrice + askPrice) / 2\n          if (result === 'NaN' || result === NaN) {\n            throw Error(\n              '[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.',\n            )\n          }\n          return result\n        }\n        "
  },
  {
    "name": "SEI/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "SEI/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['SEI/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['SEI/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "SHIB/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "SHIB/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['SHIB/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['SHIB/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "SNX/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "SNX/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['SNX/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['SNX/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "SOL/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "SOL/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['SOL/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['SOL/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "STG/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "STG/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['STG/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['STG/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "STRK/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "STRK/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['STRK/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['STRK/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "STX/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "STX/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['STX/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['STX/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "SUI/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "SUI/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['SUI/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['SUI/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "SUSHI/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "SUSHI/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['SUSHI/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['SUSHI/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "TAIKO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "TAIKO/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['TAIKO/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['TAIKO/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "TAO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "TAO/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['TAO/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['TAO/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "TIA/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "TIA/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['TIA/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['TIA/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "TUSD/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "TUSD/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['TUSD/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['TUSD/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "TWT/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "TWT/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['TWT/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['TWT/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "UMA/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "UMA/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['UMA/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['UMA/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "UNI/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "UNI/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['UNI/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['UNI/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "USDC/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "USDC/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['USDC/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['USDC/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "USDP/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "USDP/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['USDP/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['USDP/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "USDS/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "USDS/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['USDS/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['USDS/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "USDT/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "USDT/USD:CXGMNI"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['USDT/USD:CXGMNI'].bidPrice;\n            const askPrice = response.Quote['USDT/USD:CXGMNI'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "VELO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "VELO/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['VELO/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['VELO/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "VET/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "VET/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['VET/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['VET/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "VTHO/USD",
    "path": "rest/events.json",
    "parameters": {
      "event": "Quote",
      "symbol": "VTHO/USDT:CXBINA"
    },
    "parser": "(response) => {\n          const bidPrice = response.Quote['VTHO/USDT:CXBINA'].bidPrice\n          const askPrice = response.Quote['VTHO/USDT:CXBINA'].askPrice\n          const result = (bidPrice + askPrice) / 2\n          if (result === 'NaN' || result === NaN) {\n            throw Error(\n              '[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.',\n            )\n          }\n          return result\n        }\n        "
  },
  {
    "name": "WBTC/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "WBTC/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['WBTC/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['WBTC/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "WLD/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "WLD/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['WLD/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['WLD/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "WOO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "WOO/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['WOO/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['WOO/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "XLM/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "XLM/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['XLM/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['XLM/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "XRP/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "XRP/USD:CXDXF"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['XRP/USD:CXDXF'].bidPrice;\n            const askPrice = response.Quote['XRP/USD:CXDXF'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "XTZ/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "XTZ/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['XTZ/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['XTZ/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "XVS/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "XVS/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['XVS/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['XVS/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "YFI/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "YFI/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['YFI/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['YFI/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ZIL/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ZIL/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ZIL/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['ZIL/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ZK/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ZK/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ZK/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['ZK/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ZRC/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ZRC/USDT:CXHUO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ZRC/USDT:CXHUO'].bidPrice;\n            const askPrice = response.Quote['ZRC/USDT:CXHUO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ZRO/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ZRO/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ZRO/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['ZRO/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "ZRX/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "ZRX/USDT:CXBINA"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['ZRX/USDT:CXBINA'].bidPrice;\n            const askPrice = response.Quote['ZRX/USDT:CXBINA'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "crvUSD/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "CRVUSD/USDT:CXGTIO"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['CRVUSD/USDT:CXGTIO'].bidPrice;\n            const askPrice = response.Quote['CRVUSD/USDT:CXGTIO'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "stETH/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "STETH/USDT:CXOKEX"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['STETH/USDT:CXOKEX'].bidPrice;\n            const askPrice = response.Quote['STETH/USDT:CXOKEX'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  },
  {
    "name": "tBTC/USD",
    "parameters": {
      "event": "Quote",
      "symbol": "TBTC/USD:CXKBE"
    },
    "path": "rest/events.json",
    "parser": "(response) => {\n            const bidPrice = response.Quote['TBTC/USD:CXKBE'].bidPrice;\n            const askPrice = response.Quote['TBTC/USD:CXKBE'].askPrice;\n            const result = (bidPrice + askPrice) / 2;\n            if(result === \"NaN\" || result === NaN) {\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\n            }\n            return result;\n          }\n          "
  }
]
