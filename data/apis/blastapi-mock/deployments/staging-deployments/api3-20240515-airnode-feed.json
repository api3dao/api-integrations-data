{
  "nodeSettings": {
    "airnodeWalletMnemonic": "${WALLET_MNEMONIC}",
    "nodeVersion": "1.0.0",
    "stage": "${STAGE}"
  },
  "templates": {
    "0x4779afb6384afad8151d9d9ada6f38cf63fe35f71c65ae9dba6a5bd6434b2222": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "apxETH/pxETH Exchange Rate"
        }
      ]
    },
    "0x896559fa0bb1ecb0be353393bd17b051a26c22a75d858262a6744f0054efa778": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "cbETH/stETH Exchange Rate"
        }
      ]
    },
    "0xe23ea915e8456256cb5b64d3c8b4a13de9c2e8065730822822af8d0fe7930006": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "ETHx/ETH Exchange Rate"
        }
      ]
    },
    "0x88c4c7a6ff3a27e1926ead087a6b88ebfdaffece1d3d8fcaa0dd4ebbeb05a3df": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "ezETH/ETH Exchange Rate"
        }
      ]
    },
    "0xe1d235f70582729b8996576d76fdd02ce44e580a067ae8d2805d68d79af6c6e4": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "MATICx/MATIC Exchange Rate"
        }
      ]
    },
    "0xeec1ed9262325f2335c37118947be2d20ce598e86243a2b8ec4f7eed01b487b8": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "mETH/ETH Exchange Rate"
        }
      ]
    },
    "0x3c416ca1641505cd8b9c94a229b297158540cbc3eb864bcb04e0a53af69cec6a": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "mpETH/ETH Exchange Rate"
        }
      ]
    },
    "0x56b09c072d1e3da1ab627d49a6d0f3fedc309281f114a5156672fed32d9947be": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "osETH/ETH Exchange Rate"
        }
      ]
    },
    "0x08b48e6f16d27f3d8b0cbfecfeb81aa678bf66649546254434936263de2bb77c": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "pufETH/stETH Exchange Rate"
        }
      ]
    },
    "0x99dd11514cbab7d950f9b2ae58fcf9a7dea8be35474c5eb24240c149a075cb33": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "rETH/ETH Exchange Rate"
        }
      ]
    },
    "0xb39d3fef3beebce9777015e7416f0dfbd65260031c52d649fcbf680ce5fd530f": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "rsETH/ETH Exchange Rate"
        }
      ]
    },
    "0xfa0afd56fa8eb21ddb4e6d87b96a466d7545aaaaa3e3ec8e69003293f1fc4b94": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "rswETH/ETH Exchange Rate"
        }
      ]
    },
    "0xf3704a931d8cc6e3ec1d25e2cf50b28f4d2f94a495614c8d7a5fc28005e185cf": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "sAVAX/AVAX Exchange Rate"
        }
      ]
    },
    "0xa5b80b66dc751d66d88d7e9befd9c1147e65de0e116a0e83ba4f89f21a2fc2ef": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "sDAI/DAI Exchange Rate"
        }
      ]
    },
    "0x65060923db8544c0eaecde07b165c93196b31537aaa7d3e9019342db0691bc7c": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "sfrxETH/frxETH Exchange Rate"
        }
      ]
    },
    "0x2409a58369bed5a448e93fed81ddde1cad8e078197fb3df05061d33ced951dc2": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "stMATIC/MATIC Exchange Rate"
        }
      ]
    },
    "0xa5f6651b0da589d99a432900ebaede44f1667a4ebc598294913492b1f5147cc6": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "STONE/ETH Exchange Rate"
        }
      ]
    },
    "0xa4a291749fe75f6ea275a155a80cb407310b04f0d9b8f958e777a1eb7e45e785": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "sUSDe/USDe Exchange Rate"
        }
      ]
    },
    "0x5f1b3e0a6bff540c4081057874a434479396808ebde2a1345ff02ef5f43ac319": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "swETH/stETH Exchange Rate"
        }
      ]
    },
    "0x3f58b7890897996c7e6c9f5d4c481731e3c965a55b6098575a1207e61dc5f044": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "USDY/USD Exchange Rate"
        }
      ]
    },
    "0x0ac5f94718312ddb78fdd4d7c4405befb233030faa87f995451aa091eb524548": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "weETH/ETH Exchange Rate"
        }
      ]
    },
    "0xa435fd318da16cf5cb74285644f44d7528ea4cb493be645fd8bfaf26b7629447": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "wstETH/stETH Exchange Rate"
        }
      ]
    },
    "0x354f076fd79dc2e6c7c774617dc396d708e01a435d1daf092c55347c9d53ad37": {
      "endpointId": "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210",
      "parameters": [
        {
          "type": "string32",
          "name": "name",
          "value": "wUSDM/USDM Exchange Rate"
        }
      ]
    }
  },
  "endpoints": {
    "0xe24d5775e68f7df7b50d377d62ea553d53489fe896983c781bf7ad3088f8c210": {
      "endpointName": "feed",
      "oisTitle": "BlastAPI"
    }
  },
  "triggers": {
    "signedApiUpdates": [
      {
        "templateIds": ["0x4779afb6384afad8151d9d9ada6f38cf63fe35f71c65ae9dba6a5bd6434b2222"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0x896559fa0bb1ecb0be353393bd17b051a26c22a75d858262a6744f0054efa778"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0xe23ea915e8456256cb5b64d3c8b4a13de9c2e8065730822822af8d0fe7930006"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0x88c4c7a6ff3a27e1926ead087a6b88ebfdaffece1d3d8fcaa0dd4ebbeb05a3df"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0xe1d235f70582729b8996576d76fdd02ce44e580a067ae8d2805d68d79af6c6e4"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0xeec1ed9262325f2335c37118947be2d20ce598e86243a2b8ec4f7eed01b487b8"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0x3c416ca1641505cd8b9c94a229b297158540cbc3eb864bcb04e0a53af69cec6a"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0x56b09c072d1e3da1ab627d49a6d0f3fedc309281f114a5156672fed32d9947be"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0x08b48e6f16d27f3d8b0cbfecfeb81aa678bf66649546254434936263de2bb77c"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0x99dd11514cbab7d950f9b2ae58fcf9a7dea8be35474c5eb24240c149a075cb33"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0xb39d3fef3beebce9777015e7416f0dfbd65260031c52d649fcbf680ce5fd530f"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0xfa0afd56fa8eb21ddb4e6d87b96a466d7545aaaaa3e3ec8e69003293f1fc4b94"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0xf3704a931d8cc6e3ec1d25e2cf50b28f4d2f94a495614c8d7a5fc28005e185cf"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0xa5b80b66dc751d66d88d7e9befd9c1147e65de0e116a0e83ba4f89f21a2fc2ef"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0x65060923db8544c0eaecde07b165c93196b31537aaa7d3e9019342db0691bc7c"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0x2409a58369bed5a448e93fed81ddde1cad8e078197fb3df05061d33ced951dc2"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0xa5f6651b0da589d99a432900ebaede44f1667a4ebc598294913492b1f5147cc6"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0xa4a291749fe75f6ea275a155a80cb407310b04f0d9b8f958e777a1eb7e45e785"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0x5f1b3e0a6bff540c4081057874a434479396808ebde2a1345ff02ef5f43ac319"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0x3f58b7890897996c7e6c9f5d4c481731e3c965a55b6098575a1207e61dc5f044"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0x0ac5f94718312ddb78fdd4d7c4405befb233030faa87f995451aa091eb524548"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0xa435fd318da16cf5cb74285644f44d7528ea4cb493be645fd8bfaf26b7629447"],
        "fetchInterval": 60
      },
      {
        "templateIds": ["0x354f076fd79dc2e6c7c774617dc396d708e01a435d1daf092c55347c9d53ad37"],
        "fetchInterval": 60
      }
    ]
  },
  "signedApis": [
    {
      "name": "Nodary",
      "url": "https://signed-api.nodary.io",
      "authToken": "${AUTH_TOKEN_NODARY}"
    }
  ],
  "ois": [
    {
      "oisFormat": "2.3.0",
      "title": "BlastAPI",
      "version": "1.0.0",
      "apiSpecifications": {
        "components": {
          "securitySchemes": {
            "ETHEREUM_RPC_URL": {
              "in": "query",
              "name": "",
              "type": "apiKey"
            },
            "OPTIMISM_RPC_URL": {
              "in": "query",
              "name": "",
              "type": "apiKey"
            },
            "BINANCE_SMART_CHAIN_RPC_URL": {
              "in": "query",
              "name": "",
              "type": "apiKey"
            },
            "POLYGON_RPC_URL": {
              "in": "query",
              "name": "",
              "type": "apiKey"
            },
            "POLYGON_ZKEVM_RPC_URL": {
              "in": "query",
              "name": "",
              "type": "apiKey"
            },
            "MOONBEAM_RPC_URL": {
              "in": "query",
              "name": "",
              "type": "apiKey"
            },
            "MANTLE_RPC_URL": {
              "in": "query",
              "name": "",
              "type": "apiKey"
            },
            "BASE_RPC_URL": {
              "in": "query",
              "name": "",
              "type": "apiKey"
            },
            "ARBITRUM_RPC_URL": {
              "in": "query",
              "name": "",
              "type": "apiKey"
            },
            "AVALANCHE_RPC_URL": {
              "in": "query",
              "name": "",
              "type": "apiKey"
            },
            "LINEA_RPC_URL": {
              "in": "query",
              "name": "",
              "type": "apiKey"
            },
            "BLAST_RPC_URL": {
              "in": "query",
              "name": "",
              "type": "apiKey"
            }
          }
        },
        "paths": {
          "/{path}": {
            "get": {
              "parameters": [
                {
                  "in": "path",
                  "name": "path"
                },
                {
                  "in": "query",
                  "name": "dAPIName"
                },
                {
                  "in": "query",
                  "name": "multicallData"
                },
                {
                  "in": "query",
                  "name": "returnTypes"
                },
                {
                  "in": "query",
                  "name": "chainId"
                },
                {
                  "in": "query",
                  "name": "returnFormat"
                }
              ]
            }
          }
        },
        "servers": [
          {
            "url": "https://blastapi.io"
          }
        ],
        "security": {
          "ETHEREUM_RPC_URL": [],
          "OPTIMISM_RPC_URL": [],
          "BINANCE_SMART_CHAIN_RPC_URL": [],
          "POLYGON_RPC_URL": [],
          "POLYGON_ZKEVM_RPC_URL": [],
          "MOONBEAM_RPC_URL": [],
          "MANTLE_RPC_URL": [],
          "BASE_RPC_URL": [],
          "ARBITRUM_RPC_URL": [],
          "AVALANCHE_RPC_URL": [],
          "LINEA_RPC_URL": [],
          "BLAST_RPC_URL": []
        }
      },
      "endpoints": [
        {
          "fixedOperationParameters": [],
          "name": "feed",
          "parameters": [
            {
              "name": "name",
              "required": true
            },
            {
              "name": "path",
              "operationParameter": {
                "in": "path",
                "name": "path"
              },
              "required": true
            },
            {
              "name": "dAPIName",
              "operationParameter": {
                "in": "query",
                "name": "dAPIName"
              },
              "required": true
            },
            {
              "name": "multicallData",
              "operationParameter": {
                "in": "query",
                "name": "multicallData"
              },
              "required": true
            },
            {
              "name": "returnTypes",
              "operationParameter": {
                "in": "query",
                "name": "returnTypes"
              },
              "required": true
            },
            {
              "name": "chainId",
              "operationParameter": {
                "in": "query",
                "name": "chainId"
              },
              "required": true
            },
            {
              "name": "returnFormat",
              "operationParameter": {
                "in": "query",
                "name": "returnFormat"
              },
              "required": true
            }
          ],
          "reservedParameters": [
            {
              "name": "_type",
              "fixed": "int256"
            },
            {
              "name": "_times",
              "fixed": "1"
            }
          ],
          "preProcessingSpecificationV2": {
            "environment": "Node",
            "value": "({ endpointParameters }) => {\n  const preProcessingObject = {\n    \"apxETH/pxETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"apxETH/pxETH Exchange Rate\",\n        multicallData:\n          \"0x252dba420000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000009ba021b0a9b958b5e75ce9f6dff97c7ee52cb3e60000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000435d16e1700000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"cbETH/stETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"cbETH/stETH Exchange Rate\",\n        multicallData:\n          \"0x252dba42000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000be9895146f7af43049ca1c1ae358b0541ea49704000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043ba0b9a900000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"ETHx/ETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"ETHx/ETH Exchange Rate\",\n        multicallData:\n          \"0x252dba42000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f64bae65f6f2a5277571143a24faafdfc0c2a737000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043ba0b9a900000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\",\"uint256\",\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[2]\",\n      },\n    },\n    \"ezETH/ETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"ezETH/ETH Exchange Rate\",\n        multicallData:\n          \"0x252dba4200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000057f5e098cad7a3d1eed53991d4d66c45c9af78120000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002407a2d13a0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"MATICx/MATIC Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"MATICx/MATIC Exchange Rate\",\n        multicallData:\n          \"0x252dba42000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f03a7eb46d01d9ecaa104558c732cf82f6b6b6450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002475a85ef50000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[1]\",\n      },\n    },\n    \"mETH/ETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"mETH/ETH Exchange Rate\",\n        multicallData:\n          \"0x252dba42000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e3cbd06d7dadb3f4e6557bab7edd924cd1489e8f000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000245890c11c0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"mpETH/ETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"mpETH/ETH Exchange Rate\",\n        multicallData:\n          \"0x252dba4200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000048afbbd342f64ef8a9ab1c143719b63c2ad817100000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002407a2d13a0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"osETH/ETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"osETH/ETH Exchange Rate\",\n        multicallData:\n          \"0x252dba420000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000008023518b2192fb5384dadc596765b3dd1cdfe4710000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000450d25bcd00000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"pufETH/stETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"pufETH/stETH Exchange Rate\",\n        multicallData:\n          \"0x252dba42000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d9a442856c234a39a81a089c06451ebaa4306a720000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002407a2d13a0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"rETH/ETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"rETH/ETH Exchange Rate\",\n        multicallData:\n          \"0x252dba42000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000ae78736cd615f374d3085123a210448e74fc639300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004e6aa216c00000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"rsETH/ETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"rsETH/ETH Exchange Rate\",\n        multicallData:\n          \"0x252dba42000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000349a73444b1a310bae67ef67973022020d70020d00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004b4b4643400000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"rswETH/ETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"rswETH/ETH Exchange Rate\",\n        multicallData:\n          \"0x252dba42000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fae103dc9cf190ed75350761e95403b7b8afa6c000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004a7b9544e00000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"sAVAX/AVAX Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"sAVAX/AVAX Exchange Rate\",\n        multicallData:\n          \"0x252dba420000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000002b2c81e08f1af8835a78bb2a90ae924ace0ea4be000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000244a36d6c10000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"43114\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"sDAI/DAI Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"sDAI/DAI Exchange Rate\",\n        multicallData:\n          \"0x252dba4200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000083f20f44975d03b1b09e64809b757c47f942beea0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002407a2d13a0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"sfrxETH/frxETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"sfrxETH/frxETH Exchange Rate\",\n        multicallData:\n          \"0x252dba42000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000499530b0600000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"stMATIC/MATIC Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"stMATIC/MATIC Exchange Rate\",\n        multicallData:\n          \"0x252dba420000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000009ee91f9f426fa633d227f7a9b000e28b9dfd859900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000024d968447c0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[1]\",\n      },\n    },\n    \"STONE/ETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"STONE/ETH Exchange Rate\",\n        multicallData:\n          \"0x252dba420000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000007122985656e38bdc0302db86685bb972b145bd3c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000047ff9b59600000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"sUSDe/USDe Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"sUSDe/USDe Exchange Rate\",\n        multicallData:\n          \"0x252dba420000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a34970000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002407a2d13a0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"swETH/stETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"swETH/stETH Exchange Rate\",\n        multicallData:\n          \"0x252dba42000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f951e335afb289353dc249e82926178eac7ded7800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004679aefce00000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"USDY/USD Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"USDY/USD Exchange Rate\",\n        multicallData:\n          \"0x252dba42000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a96abbe61afedeb0d14a20440ae7100d9ab4882f0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000498d5fdca00000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"5000\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"weETH/ETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"weETH/ETH Exchange Rate\",\n        multicallData:\n          \"0x252dba42000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000cd5fe23c85820f7b72d0926fc9b05b43e359b7ee00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000024946260440000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"wstETH/stETH Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"wstETH/stETH Exchange Rate\",\n        multicallData:\n          \"0x252dba420000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000024bb2952fc0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n    \"wUSDM/USDM Exchange Rate\": {\n      path: \"/\",\n      parameters: {\n        dAPIName: \"wUSDM/USDM Exchange Rate\",\n        multicallData:\n          \"0x252dba4200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000057f5e098cad7a3d1eed53991d4d66c45c9af78120000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002407a2d13a0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000\",\n        returnTypes: '[[\"uint256\"]]',\n        chainId: \"1\",\n        returnFormat: \"[0]\",\n      },\n    },\n  }\n  return {\n    endpointParameters: {\n      path: preProcessingObject[endpointParameters.name].path,\n      ...preProcessingObject[endpointParameters.name].parameters,\n    },\n  }\n}\n",
            "timeoutMs": 5000
          },
          "postProcessingSpecificationV2": {
            "environment": "Node",
            "value": "\n                async ({ response, endpointParameters }) => {\n                  const postProcessingObject = {\"apxETH/pxETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"cbETH/stETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"ETHx/ETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0]\\n        }\\n        \",\"ezETH/ETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"MATICx/MATIC Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0]\\n        }\\n        \",\"mETH/ETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"mpETH/ETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"osETH/ETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"pufETH/stETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"rETH/ETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"rsETH/ETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"rswETH/ETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"sAVAX/AVAX Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"sDAI/DAI Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"sfrxETH/frxETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"stMATIC/MATIC Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0]\\n        }\\n        \",\"STONE/ETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"sUSDe/USDe Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"swETH/stETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"USDY/USD Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"weETH/ETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"wstETH/stETH Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \",\"wUSDM/USDM Exchange Rate\":\"(response) => {\\n          return response['response']['calls'][0][0]\\n        }\\n        \"};\n                  const input = { endpointParameters: response.data, ...{\"1\":\"${ETHEREUM_RPC_URL_VALUE}\",\"10\":\"${OPTIMISM_RPC_URL_VALUE}\",\"56\":\"${BINANCE_SMART_CHAIN_RPC_URL_VALUE}\",\"137\":\"${POLYGON_RPC_URL_VALUE}\",\"1101\":\"${POLYGON_ZKEVM_RPC_URL_VALUE}\",\"1284\":\"${MOONBEAM_RPC_URL_VALUE}\",\"5000\":\"${MANTLE_RPC_URL_VALUE}\",\"8453\":\"${BASE_RPC_URL_VALUE}\",\"42161\":\"${ARBITRUM_RPC_URL_VALUE}\",\"43114\":\"${AVALANCHE_RPC_URL_VALUE}\",\"59144\":\"${LINEA_RPC_URL_VALUE}\",\"81457\":\"${BLAST_RPC_URL_VALUE}\"} };\n                  const worker = new worker_threads.Worker(`console.log('This is shim code - worker has started.');  \\${new buffer.Buffer('', 'base64url').toString()}`, { eval: true });\n                  worker.postMessage(input);\n                  const callResponse = await new Promise((resolve, reject) => {\n                    worker.on('message', (message) => {\n                      console.log(\"shim code - worker has finished.\");\n                      worker.terminate();\n                      if (message.error) return reject(message.error);\n                      resolve(message);\n                    })\n                  });\n                  const parser = eval(postProcessingObject[endpointParameters.name]);\n                  return { response: parser(callResponse) };\n                }\n              ",
            "timeoutMs": 5000
          }
        }
      ]
    }
  ],
  "apiCredentials": [
    {
      "oisTitle": "BlastAPI",
      "securitySchemeName": "ETHEREUM_RPC_URL",
      "securitySchemeValue": "${ETHEREUM_RPC_URL_VALUE}"
    },
    {
      "oisTitle": "BlastAPI",
      "securitySchemeName": "OPTIMISM_RPC_URL",
      "securitySchemeValue": "${OPTIMISM_RPC_URL_VALUE}"
    },
    {
      "oisTitle": "BlastAPI",
      "securitySchemeName": "BINANCE_SMART_CHAIN_RPC_URL",
      "securitySchemeValue": "${BINANCE_SMART_CHAIN_RPC_URL_VALUE}"
    },
    {
      "oisTitle": "BlastAPI",
      "securitySchemeName": "POLYGON_RPC_URL",
      "securitySchemeValue": "${POLYGON_RPC_URL_VALUE}"
    },
    {
      "oisTitle": "BlastAPI",
      "securitySchemeName": "POLYGON_ZKEVM_RPC_URL",
      "securitySchemeValue": "${POLYGON_ZKEVM_RPC_URL_VALUE}"
    },
    {
      "oisTitle": "BlastAPI",
      "securitySchemeName": "MOONBEAM_RPC_URL",
      "securitySchemeValue": "${MOONBEAM_RPC_URL_VALUE}"
    },
    {
      "oisTitle": "BlastAPI",
      "securitySchemeName": "MANTLE_RPC_URL",
      "securitySchemeValue": "${MANTLE_RPC_URL_VALUE}"
    },
    {
      "oisTitle": "BlastAPI",
      "securitySchemeName": "BASE_RPC_URL",
      "securitySchemeValue": "${BASE_RPC_URL_VALUE}"
    },
    {
      "oisTitle": "BlastAPI",
      "securitySchemeName": "ARBITRUM_RPC_URL",
      "securitySchemeValue": "${ARBITRUM_RPC_URL_VALUE}"
    },
    {
      "oisTitle": "BlastAPI",
      "securitySchemeName": "AVALANCHE_RPC_URL",
      "securitySchemeValue": "${AVALANCHE_RPC_URL_VALUE}"
    },
    {
      "oisTitle": "BlastAPI",
      "securitySchemeName": "LINEA_RPC_URL",
      "securitySchemeValue": "${LINEA_RPC_URL_VALUE}"
    },
    {
      "oisTitle": "BlastAPI",
      "securitySchemeName": "BLAST_RPC_URL",
      "securitySchemeValue": "${BLAST_RPC_URL_VALUE}"
    }
  ]
}
