{
  "oisFormat": "2.3.0",
  "title": "dxFeed",
  "version": "0.1.0",
  "apiSpecifications": {
    "components": {
      "securitySchemes": {
        "DxFeedapi3SecurityScheme1ApiKey": {
          "in": "query",
          "name": "access_token",
          "type": "apiKey"
        }
      }
    },
    "paths": {
      "/{path}": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "path"
            },
            {
              "in": "query",
              "name": "event"
            },
            {
              "in": "query",
              "name": "symbol"
            },
            {
              "in": "query",
              "name": "source"
            },
            {
              "in": "query",
              "name": "fromTime"
            },
            {
              "in": "query",
              "name": "toTime"
            },
            {
              "in": "query",
              "name": "indent"
            },
            {
              "in": "query",
              "name": "timeout"
            },
            {
              "in": "query",
              "name": "format"
            }
          ]
        }
      }
    },
    "servers": [
      {
        "url": "https://boca.dxfeed.com/api3"
      }
    ],
    "security": {
      "DxFeedapi3SecurityScheme1ApiKey": []
    }
  },
  "endpoints": [
    {
      "fixedOperationParameters": [],
      "name": "feed",
      "operation": {
        "method": "get",
        "path": "/{path}"
      },
      "parameters": [
        {
          "name": "name",
          "required": true
        },
        {
          "name": "path",
          "operationParameter": {
            "in": "path",
            "name": "path"
          },
          "required": true
        },
        {
          "name": "event",
          "operationParameter": {
            "in": "query",
            "name": "event"
          },
          "required": true
        },
        {
          "name": "symbol",
          "operationParameter": {
            "in": "query",
            "name": "symbol"
          },
          "required": true
        },
        {
          "name": "source",
          "operationParameter": {
            "in": "query",
            "name": "source"
          },
          "required": false
        },
        {
          "name": "fromTime",
          "operationParameter": {
            "in": "query",
            "name": "fromTime"
          },
          "required": false
        },
        {
          "name": "toTime",
          "operationParameter": {
            "in": "query",
            "name": "toTime"
          },
          "required": false
        },
        {
          "name": "indent",
          "operationParameter": {
            "in": "query",
            "name": "indent"
          },
          "required": false
        },
        {
          "name": "timeout",
          "operationParameter": {
            "in": "query",
            "name": "timeout"
          },
          "required": false
        },
        {
          "name": "format",
          "operationParameter": {
            "in": "query",
            "name": "format"
          },
          "required": false
        }
      ],
      "reservedParameters": [
        {
          "name": "_type",
          "fixed": "int256"
        },
        {
          "name": "_times",
          "fixed": "1000000000000000000"
        }
      ],
      "preProcessingSpecificationV2": {
        "environment": "Node",
        "value": "({ endpointParameters }) => {\n  const preProcessingObject = {\n    \"AAVE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AAVE/USDT:CXDXF\" },\n    },\n    \"ALGO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ALGO/USD:CXKBE\" },\n    },\n    \"ANKR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ANKR/USD:CXKBE\" },\n    },\n    \"APE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"APE/USD:CXKBE\" },\n    },\n    \"API3/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"API3/USD:CXKBE\" },\n    },\n    \"APT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"APT/USD:CXKBE\" },\n    },\n    \"ARB/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ARB/USD:CXKBE\" },\n    },\n    \"ATOM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ATOM/USD:CXKBE\" },\n    },\n    \"AVAX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AVAX/USD:CXKBE\" },\n    },\n    \"AXS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AXS/USD:CXKBE\" },\n    },\n    \"BAL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BAL/USD:CXKBE\" },\n    },\n    \"BAND/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BAND/USD:CXKBE\" },\n    },\n    \"BAT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BAT/USD:CXKBE\" },\n    },\n    \"BLUR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BLUR/USD:CXKBE\" },\n    },\n    \"BNB/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BNB/USDT:CXDXF\" },\n    },\n    \"CAKE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CAKE/USDT:CXDXF\" },\n    },\n    \"CELO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CELO/USDT:CXDXF\" },\n    },\n    \"CHZ/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CHZ/USD:CXKBE\" },\n    },\n    \"COMP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"COMP/USD:CXKBE\" },\n    },\n    \"CRO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CRO/USDT:CXDXF\" },\n    },\n    \"CRV/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CRV/USD:CXKBE\" },\n    },\n    \"CVX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CVX/USDT:CXBINA\" },\n    },\n    \"DAI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DAI/USD:CXKBE\" },\n    },\n    \"DOT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DOT/USDT:CXDXF\" },\n    },\n    \"DYDX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DYDX/USD:CXKBE\" },\n    },\n    \"ENS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ENS/USD:CXKBE\" },\n    },\n    \"FIL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FIL/USD:CXKBE\" },\n    },\n    \"FLOW/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FLOW/USD:CXKBE\" },\n    },\n    \"FTM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FTM/USD:CXKBE\" },\n    },\n    \"FXS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FXS/USD:CXKBE\" },\n    },\n    \"GLMR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GLMR/USD:CXKBE\" },\n    },\n    \"GMX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GMX/USDT:CXDXF\" },\n    },\n    \"GNO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GNO/USD:CXKBE\" },\n    },\n    \"GRT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GRT/USD:CXKBE\" },\n    },\n    \"HNT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"HNT/USDT:CXDXF\" },\n    },\n    \"ICP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ICP/USD:CXKBE\" },\n    },\n    \"IMX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"IMX/USDT:CXDXF\" },\n    },\n    \"JOE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"JOE/USDT:CXDXF\" },\n    },\n    \"KSM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"KSM/USD:CXKBE\" },\n    },\n    \"LDO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"LDO/USD:CXKBE\" },\n    },\n    \"LINK/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"LINK/USDT:CXDXF\" },\n    },\n    \"LTC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"LTC/USDT:CXDXF\" },\n    },\n    \"MANA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MANA/USD:CXKBE\" },\n    },\n    \"MASK/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MASK/USD:CXKBE\" },\n    },\n    \"MKR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MKR/USD:CXKBE\" },\n    },\n    \"MOVR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MOVR/USD:CXKBE\" },\n    },\n    \"NEAR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"NEAR/USDT:CXDXF\" },\n    },\n    \"PAXG/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"PAXG/USD:CXKBE\" },\n    },\n    \"RPL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RPL/USD:CXKBE\" },\n    },\n    \"RSR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RSR/USDT:CXDXF\" },\n    },\n    \"RUNE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RUNE/USD:CXKBE\" },\n    },\n    \"SAND/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SAND/USD:CXKBE\" },\n    },\n    \"SHIB/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SHIB/USD:CXKBE\" },\n    },\n    \"SNX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SNX/USD:CXKBE\" },\n    },\n    \"SOL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SOL/USD:CXKBE\" },\n    },\n    \"STG/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"STG/USD:CXKBE\" },\n    },\n    \"STX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"STX/USD:CXKBE\" },\n    },\n    \"SUSHI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SUSHI/USD:CXKBE\" },\n    },\n    \"TUSD/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"TUSD/USDT:CXBINA\" },\n    },\n    \"UMA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"UMA/USD:CXKBE\" },\n    },\n    \"UNI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"UNI/USD:CXKBE\" },\n    },\n    \"USDP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"USDP/USDT:CXBINA\" },\n    },\n    \"USDT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"USDT/USD:CXGMNI\" },\n    },\n    \"XLM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"XLM/USD:CXKBE\" },\n    },\n    \"XTZ/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"XTZ/USD:CXKBE\" },\n    },\n    \"YFI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"YFI/USD:CXKBE\" },\n    },\n    \"ADA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ADA/USD:CXDXF\" },\n    },\n    \"BTC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BTC/USD:CXDXF\" },\n    },\n    \"ETH/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ETH/USD:CXDXF\" },\n    },\n    \"XRP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"XRP/USD:CXDXF\" },\n    },\n    \"DOGE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DOGE/USDT:CXDXF\" },\n    },\n    \"USDC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"USDC/USD:CXKBE\" },\n    },\n    \"ASTR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ASTR/USDT:CXBINA\" },\n    },\n    \"ZRX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ZRX/USDT:CXBINA\" },\n    },\n    \"SUI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SUI/USDT:CXBINA\" },\n    },\n    \"WOO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"WOO/USDT:CXBINA\" },\n    },\n    \"KDA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"KDA/USDT:CXBINA\" },\n    },\n    \"ORDI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ORDI/USDT:CXBINA\" },\n    },\n    \"PYTH/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"PYTH/USDT:CXBINA\" },\n    },\n    \"WLD/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"WLD/USDT:CXBINA\" },\n    },\n    \"XVS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"XVS/USDT:CXBINA\" },\n    },\n    \"SEI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SEI/USDT:CXBINA\" },\n    },\n    \"MANTA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MANTA/USDT:CXBINA\" },\n    },\n    \"OSMO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"OSMO/USDT:CXBINA\" },\n    },\n    \"CFX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CFX/USDT:CXBINA\" },\n    },\n    \"OP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"OP/USDT:CXBINA\" },\n    },\n    \"TIA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"TIA/USDT:CXBINA\" },\n    },\n    \"DYM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DYM/USDT:CXBINA\" },\n    },\n    \"AR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AR/USDT:CXBINA\" },\n    },\n    \"STRK/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"STRK/USDT:CXBINA\" },\n    },\n    \"AXL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AXL/USDT:CXBINA\" },\n    },\n    \"ENA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ENA/USDT:CXBINA\" },\n    },\n    \"ROSE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ROSE/USDT:CXBINA\" },\n    },\n    \"GNS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GNS/USDT:CXBINA\" },\n    },\n    \"HBAR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"HBAR/USDT:CXBINA\" },\n    },\n    \"RDNT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RDNT/USDT:CXBINA\" },\n    },\n    \"INJ/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"INJ/USDT:CXBINA\" },\n    },\n    \"PENDLE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"PENDLE/USDT:CXBINA\" },\n    },\n    \"RIF/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RIF/USDT:CXBINA\" },\n    },\n    \"KAVA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"KAVA/USDT:CXBINA\" },\n    },\n    \"WBTC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"WBTC/USDT:CXBINA\" },\n    },\n    \"RENDER/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RENDER/USDT:CXBINA\" },\n    },\n    \"ETHFI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ETHFI/USDT:CXBINA\" },\n    },\n    \"ERN/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ERN/USDT:CXBINA\" },\n    },\n    \"METIS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"METIS/USDT:CXBINA\" },\n    },\n    \"QUICK/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"QUICK/USDT:CXBINA\" },\n    },\n    \"LQTY/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"LQTY/USDT:CXBINA\" },\n    },\n    \"ZIL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ZIL/USDT:CXBINA\" },\n    },\n    \"TAO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"TAO/USDT:CXBINA\" },\n    },\n    \"TWT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"TWT/USDT:CXBINA\" },\n    },\n    \"FDUSD/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FDUSD/USDT:CXBINA\" },\n    },\n    \"MNT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MNT/USDT:CXDXF\" },\n    },\n    \"MODE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MODE/USDT:CXGTIO\" },\n    },\n    \"OKB/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"OKB/USDT:CXGTIO\" },\n    },\n    \"ONDO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ONDO/USDT:CXGTIO\" },\n    },\n    \"NEON/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"NEON/USDT:CXGTIO\" },\n    },\n    \"BLAST/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BLAST/USDT:CXGTIO\" },\n    },\n    \"SATS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SATS/USDT:CXGTIO\" },\n    },\n    \"CORE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CORE/USDT:CXGTIO\" },\n    },\n    \"PYUSD/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"PYUSD/USDT:CXGTIO\" },\n    },\n    \"DEGEN/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DEGEN/USDT:CXGTIO\" },\n    },\n    \"FRAX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FRAX/USDT:CXGTIO\" },\n    },\n    \"MERL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MERL/USDT:CXGTIO\" },\n    },\n    \"RARI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RARI/USDT:CXGTIO\" },\n    },\n    \"SAFE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SAFE/USDT:CXGTIO\" },\n    },\n    \"JUICE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"JUICE/USDT:CXGTIO\" },\n    },\n    \"AERO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AERO/USDT:CXGTIO\" },\n    },\n    \"TAIKO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"TAIKO/USDT:CXGTIO\" },\n    },\n    \"EURC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"EUROC/USDT:CXHUO\" },\n    },\n    \"LUMIA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"LUMIA/USDT:CXBINA\" },\n    },\n    \"BRETT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BRETT/USDC:CXBBIT\" },\n    },\n    \"COOK/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"COOK/USDT:CXBBIT\" },\n    },\n    \"SCR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SCR/USDT:CXBINA\" },\n    },\n  }\n  return {\n    endpointParameters: {\n      path: preProcessingObject[endpointParameters.name].path,\n      ...preProcessingObject[endpointParameters.name].parameters,\n    },\n  }\n}\n",
        "timeoutMs": 5000
      },
      "postProcessingSpecificationV2": {
        "environment": "Node",
        "value": "({ response, endpointParameters }) => {\n  const postProcessingObject = {\n    \"AAVE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AAVE/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['AAVE/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ALGO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ALGO/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['ALGO/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ANKR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ANKR/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['ANKR/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"APE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['APE/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['APE/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"API3/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['API3/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['API3/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"APT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['APT/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['APT/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ARB/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ARB/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['ARB/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ATOM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ATOM/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['ATOM/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"AVAX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AVAX/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['AVAX/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"AXS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AXS/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['AXS/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BAL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BAL/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['BAL/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BAND/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BAND/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['BAND/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BAT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BAT/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['BAT/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BLUR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BLUR/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['BLUR/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BNB/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BNB/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['BNB/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CAKE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CAKE/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['CAKE/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CELO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CELO/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['CELO/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CHZ/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CHZ/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['CHZ/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"COMP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['COMP/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['COMP/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CRO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CRO/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['CRO/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CRV/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CRV/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['CRV/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CVX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CVX/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['CVX/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DAI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DAI/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['DAI/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DOT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DOT/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['DOT/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DYDX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DYDX/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['DYDX/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ENS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ENS/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['ENS/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FIL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FIL/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['FIL/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FLOW/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FLOW/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['FLOW/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FTM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FTM/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['FTM/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FXS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FXS/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['FXS/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GLMR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GLMR/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['GLMR/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GMX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GMX/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['GMX/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GNO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GNO/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['GNO/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GRT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GRT/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['GRT/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"HNT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['HNT/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['HNT/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ICP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ICP/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['ICP/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"IMX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['IMX/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['IMX/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"JOE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['JOE/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['JOE/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"KSM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['KSM/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['KSM/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"LDO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['LDO/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['LDO/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"LINK/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['LINK/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['LINK/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"LTC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['LTC/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['LTC/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MANA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MANA/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['MANA/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MASK/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MASK/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['MASK/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MKR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MKR/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['MKR/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MOVR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MOVR/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['MOVR/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"NEAR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['NEAR/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['NEAR/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"PAXG/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['PAXG/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['PAXG/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RPL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RPL/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['RPL/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RSR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RSR/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['RSR/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RUNE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RUNE/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['RUNE/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SAND/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SAND/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['SAND/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SHIB/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SHIB/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['SHIB/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SNX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SNX/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['SNX/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SOL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SOL/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['SOL/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"STG/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['STG/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['STG/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"STX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['STX/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['STX/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SUSHI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SUSHI/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['SUSHI/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"TUSD/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['TUSD/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['TUSD/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"UMA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['UMA/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['UMA/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"UNI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['UNI/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['UNI/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"USDP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['USDP/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['USDP/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"USDT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['USDT/USD:CXGMNI'].bidPrice;\\n            const askPrice = response.Quote['USDT/USD:CXGMNI'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"XLM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['XLM/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['XLM/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"XTZ/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['XTZ/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['XTZ/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"YFI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['YFI/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['YFI/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ADA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ADA/USD:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['ADA/USD:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BTC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BTC/USD:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['BTC/USD:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ETH/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ETH/USD:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['ETH/USD:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"XRP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['XRP/USD:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['XRP/USD:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DOGE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DOGE/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['DOGE/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"USDC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['USDC/USD:CXKBE'].bidPrice;\\n            const askPrice = response.Quote['USDC/USD:CXKBE'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ASTR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ASTR/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['ASTR/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ZRX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ZRX/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['ZRX/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SUI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SUI/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['SUI/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"WOO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['WOO/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['WOO/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"KDA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['KDA/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['KDA/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ORDI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ORDI/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['ORDI/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"PYTH/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['PYTH/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['PYTH/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"WLD/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['WLD/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['WLD/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"XVS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['XVS/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['XVS/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SEI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SEI/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['SEI/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MANTA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MANTA/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['MANTA/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"OSMO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['OSMO/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['OSMO/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CFX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CFX/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['CFX/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"OP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['OP/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['OP/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"TIA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['TIA/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['TIA/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DYM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DYM/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['DYM/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"AR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AR/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['AR/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"STRK/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['STRK/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['STRK/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"AXL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AXL/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['AXL/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ENA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ENA/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['ENA/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ROSE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ROSE/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['ROSE/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GNS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GNS/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['GNS/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"HBAR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['HBAR/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['HBAR/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RDNT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RDNT/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['RDNT/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"INJ/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['INJ/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['INJ/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"PENDLE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['PENDLE/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['PENDLE/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RIF/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RIF/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['RIF/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"KAVA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['KAVA/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['KAVA/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"WBTC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['WBTC/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['WBTC/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RENDER/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RENDER/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['RENDER/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ETHFI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ETHFI/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['ETHFI/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ERN/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ERN/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['ERN/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"METIS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['METIS/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['METIS/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"QUICK/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['QUICK/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['QUICK/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"LQTY/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['LQTY/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['LQTY/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ZIL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ZIL/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['ZIL/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"TAO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['TAO/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['TAO/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"TWT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['TWT/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['TWT/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FDUSD/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FDUSD/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['FDUSD/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MNT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MNT/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['MNT/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MODE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MODE/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['MODE/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"OKB/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['OKB/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['OKB/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ONDO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ONDO/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['ONDO/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"NEON/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['NEON/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['NEON/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BLAST/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BLAST/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['BLAST/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SATS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SATS/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['SATS/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CORE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CORE/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['CORE/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"PYUSD/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['PYUSD/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['PYUSD/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DEGEN/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DEGEN/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['DEGEN/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FRAX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FRAX/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['FRAX/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MERL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MERL/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['MERL/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RARI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RARI/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['RARI/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SAFE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SAFE/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['SAFE/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"JUICE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['JUICE/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['JUICE/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"AERO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AERO/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['AERO/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"TAIKO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['TAIKO/USDT:CXGTIO'].bidPrice;\\n            const askPrice = response.Quote['TAIKO/USDT:CXGTIO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"EURC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['EUROC/USDT:CXHUO'].bidPrice;\\n            const askPrice = response.Quote['EUROC/USDT:CXHUO'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"LUMIA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['LUMIA/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['LUMIA/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BRETT/USD\":\n      \"(response) => {\\n          const bidPrice = response.Quote['BRETT/USDC:CXBBIT'].bidPrice\\n          const askPrice = response.Quote['BRETT/USDC:CXBBIT'].askPrice\\n          const result = (bidPrice + askPrice) / 2\\n          if (result === 'NaN' || result === NaN) {\\n            throw Error(\\n              '[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.',\\n            )\\n          }\\n          return result\\n        }\\n        \",\n    \"COOK/USD\":\n      \"(response) => {\\n          const bidPrice = response.Quote['COOK/USDT:CXBBIT'].bidPrice\\n          const askPrice = response.Quote['COOK/USDT:CXBBIT'].askPrice\\n          const result = (bidPrice + askPrice) / 2\\n          if (result === 'NaN' || result === NaN) {\\n            throw Error(\\n              '[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.',\\n            )\\n          }\\n          return result\\n        }\\n        \",\n    \"SCR/USD\":\n      \"(response) => {\\n          const bidPrice = response.Quote['SCR/USDT:CXBINA'].bidPrice\\n          const askPrice = response.Quote['SCR/USDT:CXBINA'].askPrice\\n          const result = (bidPrice + askPrice) / 2\\n          if (result === 'NaN' || result === NaN) {\\n            throw Error(\\n              '[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.',\\n            )\\n          }\\n          return result\\n        }\\n        \",\n  }\n  const parser = eval(postProcessingObject[endpointParameters.name])\n  return { response: parser(response) }\n}\n",
        "timeoutMs": 5000
      }
    }
  ]
}
