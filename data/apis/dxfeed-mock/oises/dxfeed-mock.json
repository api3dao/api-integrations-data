{
  "oisFormat": "2.3.0",
  "title": "dxFeed",
  "version": "0.1.0",
  "apiSpecifications": {
    "components": {
      "securitySchemes": {
        "DxFeedapi3SecurityScheme1ApiKey": {
          "in": "query",
          "name": "access_token",
          "type": "apiKey"
        }
      }
    },
    "paths": {
      "/{path}": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "path"
            },
            {
              "in": "query",
              "name": "event"
            },
            {
              "in": "query",
              "name": "symbol"
            },
            {
              "in": "query",
              "name": "source"
            },
            {
              "in": "query",
              "name": "fromTime"
            },
            {
              "in": "query",
              "name": "toTime"
            },
            {
              "in": "query",
              "name": "indent"
            },
            {
              "in": "query",
              "name": "timeout"
            },
            {
              "in": "query",
              "name": "format"
            }
          ]
        }
      }
    },
    "servers": [
      {
        "url": "https://boca.dxfeed.com/api3"
      }
    ],
    "security": {
      "DxFeedapi3SecurityScheme1ApiKey": []
    }
  },
  "endpoints": [
    {
      "fixedOperationParameters": [],
      "name": "feed",
      "operation": {
        "method": "get",
        "path": "/{path}"
      },
      "parameters": [
        {
          "name": "name",
          "required": true
        },
        {
          "name": "path",
          "operationParameter": {
            "in": "path",
            "name": "path"
          },
          "required": true
        },
        {
          "name": "event",
          "operationParameter": {
            "in": "query",
            "name": "event"
          },
          "required": true
        },
        {
          "name": "symbol",
          "operationParameter": {
            "in": "query",
            "name": "symbol"
          },
          "required": true
        },
        {
          "name": "source",
          "operationParameter": {
            "in": "query",
            "name": "source"
          },
          "required": false
        },
        {
          "name": "fromTime",
          "operationParameter": {
            "in": "query",
            "name": "fromTime"
          },
          "required": false
        },
        {
          "name": "toTime",
          "operationParameter": {
            "in": "query",
            "name": "toTime"
          },
          "required": false
        },
        {
          "name": "indent",
          "operationParameter": {
            "in": "query",
            "name": "indent"
          },
          "required": false
        },
        {
          "name": "timeout",
          "operationParameter": {
            "in": "query",
            "name": "timeout"
          },
          "required": false
        },
        {
          "name": "format",
          "operationParameter": {
            "in": "query",
            "name": "format"
          },
          "required": false
        }
      ],
      "reservedParameters": [
        {
          "name": "_type",
          "fixed": "int256"
        },
        {
          "name": "_times",
          "fixed": "1000000000000000000"
        }
      ],
      "preProcessingSpecificationV2": {
        "environment": "Node",
        "value": "({ endpointParameters }) => {\n  const preProcessingObject = {\n    \"AAPL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AAPL\" },\n    },\n    \"AMZN/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AMZN\" },\n    },\n    \"ARKK/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ARKK\" },\n    },\n    \"COIN/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"COIN\" },\n    },\n    \"GME/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GME\" },\n    },\n    \"GOOGL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GOOG\" },\n    },\n    \"JPM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"JPM\" },\n    },\n    \"META/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"META\" },\n    },\n    \"MSFT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MSFT\" },\n    },\n    \"NFLX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"NFLX\" },\n    },\n    \"NVDA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"NVDA\" },\n    },\n    \"SPY/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SPY\" },\n    },\n    \"TSLA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"TSLA\" },\n    },\n    \"TSM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"TSM\" },\n    },\n    \"QQQ/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"QQQ\" },\n    },\n    \"DIS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DIS\" },\n    },\n    \"AUD/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AUD/USD:DXF{mm=wards}\" },\n    },\n    \"BRL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BRL/USD{mm=COMP}\" },\n    },\n    \"CNY/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CNY/USD{mm=COMP}\" },\n    },\n    \"EUR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"EUR/USD:DXF{mm=wards}\" },\n    },\n    \"GBP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GBP/USD:DXF{mm=wards}\" },\n    },\n    \"INR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"INR/USD{mm=COMP}\" },\n    },\n    \"KRW/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"KRW/USD{mm=COMP}\" },\n    },\n    \"MXN/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MXN/USD{mm=COMP}\" },\n    },\n    \"NZD/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"NZD/USD:DXF{mm=wards}\" },\n    },\n    \"PHP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"PHP/USD{mm=COMP}\" },\n    },\n    \"SEK/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SEK/USD{mm=COMP}\" },\n    },\n    \"SGD/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SGD/USD{mm=COMP}\" },\n    },\n    \"TRY/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"TRY/USD{mm=COMP}\" },\n    },\n    \"ZAR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ZAR/USD{mm=COMP}\" },\n    },\n    \"AAVE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AAVE/USDT:CXDXF\" },\n    },\n    \"ALGO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ALGO/USD\" },\n    },\n    \"ANKR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ANKR/USD\" },\n    },\n    \"APE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"APE/USD\" },\n    },\n    \"API3/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"API3/USD\" },\n    },\n    \"APT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"APT/USD\" },\n    },\n    \"ARB/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ARB/USD\" },\n    },\n    \"ATOM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ATOM/USD\" },\n    },\n    \"AVAX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AVAX/USD\" },\n    },\n    \"AXS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"AXS/USD\" },\n    },\n    \"BAL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BAL/USD\" },\n    },\n    \"BAND/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BAND/USD\" },\n    },\n    \"BAT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BAT/USD\" },\n    },\n    \"BLUR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BLUR/USD\" },\n    },\n    \"BNB/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BNB/USDT:CXDXF\" },\n    },\n    \"CAKE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CAKE/USDT:CXDXF\" },\n    },\n    \"CELO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CELO/USDT:CXDXF\" },\n    },\n    \"CHZ/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CHZ/USD\" },\n    },\n    \"COMP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"COMP/USD\" },\n    },\n    \"CRO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CRO/USDT:CXDXF\" },\n    },\n    \"CRV/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CRV/USD\" },\n    },\n    \"CVX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"CVX/USDT:CXBINA\" },\n    },\n    \"DAI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DAI/USD\" },\n    },\n    \"DOT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DOT/USDT:CXDXF\" },\n    },\n    \"DYDX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DYDX/USD\" },\n    },\n    \"ENS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ENS/USD\" },\n    },\n    \"EUL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"EUL/USD\" },\n    },\n    \"FIL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FIL/USD\" },\n    },\n    \"FLOW/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FLOW/USD\" },\n    },\n    \"FTM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FTM/USD\" },\n    },\n    \"FXS/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"FXS/USD\" },\n    },\n    \"GLMR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GLMR/USD\" },\n    },\n    \"GMX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GMX/USDT:CXDXF\" },\n    },\n    \"GNO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GNO/USD\" },\n    },\n    \"GRT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"GRT/USD\" },\n    },\n    \"HNT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"HNT/USDT:CXDXF\" },\n    },\n    \"ICP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ICP/USD\" },\n    },\n    \"IMX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"IMX/USDT:CXDXF\" },\n    },\n    \"JOE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"JOE/USDT:CXDXF\" },\n    },\n    \"KSM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"KSM/USD\" },\n    },\n    \"LDO/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"LDO/USD\" },\n    },\n    \"LINK/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"LINK/USDT:CXDXF\" },\n    },\n    \"LTC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"LTC/USDT:CXDXF\" },\n    },\n    \"MANA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MANA/USD\" },\n    },\n    \"MASK/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MASK/USD\" },\n    },\n    \"MATIC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MATIC/USD\" },\n    },\n    \"MKR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MKR/USD\" },\n    },\n    \"MOVR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"MOVR/USD\" },\n    },\n    \"NEAR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"NEAR/USDT:CXDXF\" },\n    },\n    \"PAXG/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"PAXG/USD\" },\n    },\n    \"RNDR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RNDR/USD\" },\n    },\n    \"RPL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RPL/USD\" },\n    },\n    \"RSR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RSR/USDT:CXDXF\" },\n    },\n    \"RUNE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"RUNE/USD\" },\n    },\n    \"SAND/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SAND/USD\" },\n    },\n    \"SHIB/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SHIB/USD\" },\n    },\n    \"SNX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SNX/USD\" },\n    },\n    \"SOL/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SOL/USD\" },\n    },\n    \"STG/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"STG/USD\" },\n    },\n    \"STX/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"STX/USD\" },\n    },\n    \"SUSHI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"SUSHI/USD\" },\n    },\n    \"TUSD/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"TUSD/USDT:CXBINA\" },\n    },\n    \"UMA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"UMA/USD\" },\n    },\n    \"UNI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"UNI/USD\" },\n    },\n    \"USDP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"USDP/USDT:CXBINA\" },\n    },\n    \"USDT/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"USDT/USD:CXGMNI\" },\n    },\n    \"XLM/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"XLM/USD\" },\n    },\n    \"XTZ/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"XTZ/USD\" },\n    },\n    \"YFI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"YFI/USD\" },\n    },\n    \"ADA/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ADA/USD:CXDXF\" },\n    },\n    \"BTC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"BTC/USD:CXDXF\" },\n    },\n    \"ETH/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ETH/USD:CXDXF\" },\n    },\n    \"XRP/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"XRP/USD:CXDXF\" },\n    },\n    \"DOGE/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"DOGE/USDT:CXDXF\" },\n    },\n    \"USDC/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"USDC/USD\" },\n    },\n    \"ASTR/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"ASTR/USDT:CXBINA\" },\n    },\n    \"WTI/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"WTI/USD:BFX\" },\n    },\n    \"XAG/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"XAG/USD:BFX\" },\n    },\n    \"XAU/USD\": {\n      path: \"rest/events.json\",\n      parameters: { event: \"Quote\", symbol: \"XAU/USD:BFX\" },\n    },\n  }\n  return {\n    endpointParameters: {\n      path: preProcessingObject[endpointParameters.name].path,\n      ...preProcessingObject[endpointParameters.name].parameters,\n    },\n  }\n}\n",
        "timeoutMs": 5000
      },
      "postProcessingSpecificationV2": {
        "environment": "Node",
        "value": "({ response, endpointParameters }) => {\n  const postProcessingObject = {\n    \"AAPL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AAPL'].bidPrice;\\n            const askPrice = response.Quote['AAPL'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"AMZN/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AMZN'].bidPrice;\\n            const askPrice = response.Quote['AMZN'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ARKK/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ARKK'].bidPrice;\\n            const askPrice = response.Quote['ARKK'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"COIN/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['COIN'].bidPrice;\\n            const askPrice = response.Quote['COIN'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GME/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GME'].bidPrice;\\n            const askPrice = response.Quote['GME'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GOOGL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GOOG'].bidPrice;\\n            const askPrice = response.Quote['GOOG'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"JPM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['JPM'].bidPrice;\\n            const askPrice = response.Quote['JPM'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"META/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['META'].bidPrice;\\n            const askPrice = response.Quote['META'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MSFT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MSFT'].bidPrice;\\n            const askPrice = response.Quote['MSFT'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"NFLX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['NFLX'].bidPrice;\\n            const askPrice = response.Quote['NFLX'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"NVDA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['NVDA'].bidPrice;\\n            const askPrice = response.Quote['NVDA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SPY/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SPY'].bidPrice;\\n            const askPrice = response.Quote['SPY'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"TSLA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['TSLA'].bidPrice;\\n            const askPrice = response.Quote['TSLA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"TSM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['TSM'].bidPrice;\\n            const askPrice = response.Quote['TSM'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"QQQ/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['QQQ'].bidPrice;\\n            const askPrice = response.Quote['QQQ'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DIS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DIS'].bidPrice;\\n            const askPrice = response.Quote['DIS'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"AUD/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AUD/USD:DXF{mm=wards}'].bidPrice;\\n            const askPrice = response.Quote['AUD/USD:DXF{mm=wards}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BRL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BRL/USD{mm=COMP}'].bidPrice;\\n            const askPrice = response.Quote['BRL/USD{mm=COMP}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CNY/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CNY/USD{mm=COMP}'].bidPrice;\\n            const askPrice = response.Quote['CNY/USD{mm=COMP}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"EUR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['EUR/USD:DXF{mm=wards}'].bidPrice;\\n            const askPrice = response.Quote['EUR/USD:DXF{mm=wards}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GBP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GBP/USD:DXF{mm=wards}'].bidPrice;\\n            const askPrice = response.Quote['GBP/USD:DXF{mm=wards}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"INR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['INR/USD{mm=COMP}'].bidPrice;\\n            const askPrice = response.Quote['INR/USD{mm=COMP}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"KRW/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['KRW/USD{mm=COMP}'].bidPrice;\\n            const askPrice = response.Quote['KRW/USD{mm=COMP}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MXN/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MXN/USD{mm=COMP}'].bidPrice;\\n            const askPrice = response.Quote['MXN/USD{mm=COMP}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"NZD/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['NZD/USD:DXF{mm=wards}'].bidPrice;\\n            const askPrice = response.Quote['NZD/USD:DXF{mm=wards}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"PHP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['PHP/USD{mm=COMP}'].bidPrice;\\n            const askPrice = response.Quote['PHP/USD{mm=COMP}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SEK/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SEK/USD{mm=COMP}'].bidPrice;\\n            const askPrice = response.Quote['SEK/USD{mm=COMP}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SGD/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SGD/USD{mm=COMP}'].bidPrice;\\n            const askPrice = response.Quote['SGD/USD{mm=COMP}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"TRY/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['TRY/USD{mm=COMP}'].bidPrice;\\n            const askPrice = response.Quote['TRY/USD{mm=COMP}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ZAR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ZAR/USD{mm=COMP}'].bidPrice;\\n            const askPrice = response.Quote['ZAR/USD{mm=COMP}'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"AAVE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AAVE/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['AAVE/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ALGO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ALGO/USD'].bidPrice;\\n            const askPrice = response.Quote['ALGO/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ANKR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ANKR/USD'].bidPrice;\\n            const askPrice = response.Quote['ANKR/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"APE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['APE/USD'].bidPrice;\\n            const askPrice = response.Quote['APE/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"API3/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['API3/USD'].bidPrice;\\n            const askPrice = response.Quote['API3/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"APT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['APT/USD'].bidPrice;\\n            const askPrice = response.Quote['APT/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ARB/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ARB/USD'].bidPrice;\\n            const askPrice = response.Quote['ARB/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ATOM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ATOM/USD'].bidPrice;\\n            const askPrice = response.Quote['ATOM/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"AVAX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AVAX/USD'].bidPrice;\\n            const askPrice = response.Quote['AVAX/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"AXS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['AXS/USD'].bidPrice;\\n            const askPrice = response.Quote['AXS/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BAL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BAL/USD'].bidPrice;\\n            const askPrice = response.Quote['BAL/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BAND/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BAND/USD'].bidPrice;\\n            const askPrice = response.Quote['BAND/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BAT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BAT/USD'].bidPrice;\\n            const askPrice = response.Quote['BAT/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BLUR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BLUR/USD'].bidPrice;\\n            const askPrice = response.Quote['BLUR/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BNB/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BNB/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['BNB/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CAKE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CAKE/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['CAKE/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CELO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CELO/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['CELO/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CHZ/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CHZ/USD'].bidPrice;\\n            const askPrice = response.Quote['CHZ/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"COMP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['COMP/USD'].bidPrice;\\n            const askPrice = response.Quote['COMP/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CRO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CRO/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['CRO/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CRV/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CRV/USD'].bidPrice;\\n            const askPrice = response.Quote['CRV/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"CVX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['CVX/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['CVX/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DAI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DAI/USD'].bidPrice;\\n            const askPrice = response.Quote['DAI/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DOT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DOT/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['DOT/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DYDX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DYDX/USD'].bidPrice;\\n            const askPrice = response.Quote['DYDX/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ENS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ENS/USD'].bidPrice;\\n            const askPrice = response.Quote['ENS/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"EUL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['EUL/USD'].bidPrice;\\n            const askPrice = response.Quote['EUL/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FIL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FIL/USD'].bidPrice;\\n            const askPrice = response.Quote['FIL/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FLOW/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FLOW/USD'].bidPrice;\\n            const askPrice = response.Quote['FLOW/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FTM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FTM/USD'].bidPrice;\\n            const askPrice = response.Quote['FTM/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"FXS/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['FXS/USD'].bidPrice;\\n            const askPrice = response.Quote['FXS/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GLMR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GLMR/USD'].bidPrice;\\n            const askPrice = response.Quote['GLMR/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GMX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GMX/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['GMX/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GNO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GNO/USD'].bidPrice;\\n            const askPrice = response.Quote['GNO/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"GRT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['GRT/USD'].bidPrice;\\n            const askPrice = response.Quote['GRT/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"HNT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['HNT/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['HNT/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ICP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ICP/USD'].bidPrice;\\n            const askPrice = response.Quote['ICP/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"IMX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['IMX/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['IMX/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"JOE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['JOE/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['JOE/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"KSM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['KSM/USD'].bidPrice;\\n            const askPrice = response.Quote['KSM/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"LDO/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['LDO/USD'].bidPrice;\\n            const askPrice = response.Quote['LDO/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"LINK/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['LINK/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['LINK/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"LTC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['LTC/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['LTC/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MANA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MANA/USD'].bidPrice;\\n            const askPrice = response.Quote['MANA/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MASK/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MASK/USD'].bidPrice;\\n            const askPrice = response.Quote['MASK/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MATIC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MATIC/USD'].bidPrice;\\n            const askPrice = response.Quote['MATIC/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MKR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MKR/USD'].bidPrice;\\n            const askPrice = response.Quote['MKR/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"MOVR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['MOVR/USD'].bidPrice;\\n            const askPrice = response.Quote['MOVR/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"NEAR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['NEAR/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['NEAR/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"PAXG/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['PAXG/USD'].bidPrice;\\n            const askPrice = response.Quote['PAXG/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RNDR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RNDR/USD'].bidPrice;\\n            const askPrice = response.Quote['RNDR/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RPL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RPL/USD'].bidPrice;\\n            const askPrice = response.Quote['RPL/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RSR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RSR/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['RSR/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"RUNE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['RUNE/USD'].bidPrice;\\n            const askPrice = response.Quote['RUNE/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SAND/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SAND/USD'].bidPrice;\\n            const askPrice = response.Quote['SAND/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SHIB/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SHIB/USD'].bidPrice;\\n            const askPrice = response.Quote['SHIB/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SNX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SNX/USD'].bidPrice;\\n            const askPrice = response.Quote['SNX/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SOL/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SOL/USD'].bidPrice;\\n            const askPrice = response.Quote['SOL/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"STG/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['STG/USD'].bidPrice;\\n            const askPrice = response.Quote['STG/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"STX/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['STX/USD'].bidPrice;\\n            const askPrice = response.Quote['STX/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"SUSHI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['SUSHI/USD'].bidPrice;\\n            const askPrice = response.Quote['SUSHI/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"TUSD/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['TUSD/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['TUSD/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"UMA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['UMA/USD'].bidPrice;\\n            const askPrice = response.Quote['UMA/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"UNI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['UNI/USD'].bidPrice;\\n            const askPrice = response.Quote['UNI/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"USDP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['USDP/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['USDP/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"USDT/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['USDT/USD:CXGMNI'].bidPrice;\\n            const askPrice = response.Quote['USDT/USD:CXGMNI'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"XLM/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['XLM/USD'].bidPrice;\\n            const askPrice = response.Quote['XLM/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"XTZ/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['XTZ/USD'].bidPrice;\\n            const askPrice = response.Quote['XTZ/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"YFI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['YFI/USD'].bidPrice;\\n            const askPrice = response.Quote['YFI/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ADA/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ADA/USD:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['ADA/USD:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"BTC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['BTC/USD:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['BTC/USD:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ETH/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ETH/USD:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['ETH/USD:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"XRP/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['XRP/USD:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['XRP/USD:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"DOGE/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['DOGE/USDT:CXDXF'].bidPrice;\\n            const askPrice = response.Quote['DOGE/USDT:CXDXF'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"USDC/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['USDC/USD'].bidPrice;\\n            const askPrice = response.Quote['USDC/USD'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"ASTR/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['ASTR/USDT:CXBINA'].bidPrice;\\n            const askPrice = response.Quote['ASTR/USDT:CXBINA'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"WTI/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['WTI/USD:BFX'].bidPrice;\\n            const askPrice = response.Quote['WTI/USD:BFX'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"XAG/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['XAG/USD:BFX'].bidPrice;\\n            const askPrice = response.Quote['XAG/USD:BFX'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n    \"XAU/USD\":\n      \"(response) => {\\n            const bidPrice = response.Quote['XAU/USD:BFX'].bidPrice;\\n            const askPrice = response.Quote['XAU/USD:BFX'].askPrice;\\n            const result = (bidPrice + askPrice) / 2;\\n            if(result === \\\"NaN\\\" || result === NaN) {\\n              throw Error('[Known Error] - dxFeed returns NaN for one of the target values bidPrice or askPrice.');\\n            }\\n            return result;\\n          }\\n          \",\n  }\n  const parser = eval(postProcessingObject[endpointParameters.name])\n  return { response: parser(response) }\n}\n",
        "timeoutMs": 5000
      }
    }
  ]
}
